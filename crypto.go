package wpnp

import (
	"encoding/binary"
	"math/rand"
	"time"
)

var fcTable = [][]byte{
	{0xCA, 0xCB, 0xCF, 0x7D, 0xAF, 0x28, 0x4F, 0x2B, 0x79, 0x9C, 0x72, 0x32, 0xF0, 0x59, 0x45, 0xFA, 0xB6, 0xFE, 0xB0, 0x97, 0x66, 0x35, 0x82, 0x2A, 0x6D, 0x3E, 0x3F, 0x0C, 0xD6, 0x7F, 0xBC, 0xE6, 0x33, 0x43, 0x40, 0xED, 0xD0, 0x4A, 0xDC, 0x69, 0x7B, 0x0D, 0x17, 0x6E, 0x29, 0x2C, 0x34, 0x8F, 0x5B, 0xF9, 0xFC, 0xB2, 0x81, 0x8B, 0xC8, 0x8D, 0x9E, 0x49, 0x16, 0x2F, 0x4B, 0xCE, 0xB4, 0x08, 0x56, 0x83, 0x91, 0xAE, 0x1B, 0x60, 0x05, 0xD3, 0xBE, 0x52, 0x6A, 0x9D, 0xD2, 0xE4, 0x78, 0xC0, 0x25, 0x8A, 0x11, 0xCD, 0x55, 0xA9, 0x9B, 0xC4, 0x7C, 0x37, 0xB1, 0x67, 0xC7, 0x30, 0x51, 0x13, 0xA7, 0x9F, 0xE0, 0x09, 0x64, 0x70, 0x71, 0x4E, 0x85, 0x87, 0x62, 0xA3, 0x02, 0xC6, 0xE5, 0x18, 0x24, 0xEE, 0xF3, 0x0E, 0x39, 0xDD, 0x73, 0xCC, 0xD7, 0xC5, 0x2D, 0xB7, 0x7E, 0x42, 0x6C, 0xE2, 0x57, 0x76, 0x6B, 0xC1, 0xA8, 0x07, 0x03, 0xD8, 0xEA, 0x98, 0xD9, 0x8E, 0xAB, 0x0B, 0x90, 0xE8, 0xEC, 0x15, 0x53, 0xF8, 0xF1, 0x50, 0xBB, 0xDB, 0x21, 0xA6, 0x46, 0xD4, 0xBF, 0x3A, 0x5C, 0x95, 0xAD, 0x1F, 0xB5, 0xD1, 0x61, 0x9A, 0x93, 0x99, 0xFF, 0x1E, 0xC9, 0xDA, 0xFD, 0xC3, 0xDE, 0xA2, 0x3C, 0x0A, 0x54, 0xF2, 0x92, 0x80, 0xE1, 0x1C, 0x10, 0x1A, 0x44, 0x88, 0xAA, 0xF5, 0x48, 0xB8, 0xE3, 0xBA, 0x58, 0x04, 0x6F, 0x5E, 0x77, 0x23, 0x84, 0xA4, 0x4C, 0x27, 0x75, 0x01, 0x14, 0x19, 0xB3, 0x63, 0x5F, 0xA1, 0x26, 0xA0, 0x5D, 0xF4, 0x36, 0xB9, 0xA5, 0x68, 0x65, 0x31, 0x00, 0x1D, 0x96, 0x5A, 0x2E, 0x06, 0xEB, 0xDF, 0x3D, 0xF7, 0xE7, 0x7A, 0x22, 0x47, 0xAC, 0xC2, 0x74, 0x38, 0x3B, 0x94, 0x20, 0xF6, 0x12, 0x8C, 0x0F, 0x41, 0xBD, 0x4D, 0x89, 0xFB, 0xE9, 0x86, 0xD5, 0xEF},
	{0x48, 0x09, 0xA2, 0x4E, 0xE7, 0xBB, 0xDC, 0xDD, 0xF2, 0xCA, 0xF8, 0x3E, 0xDF, 0xCB, 0x24, 0x04, 0x92, 0x3C, 0x0A, 0x73, 0x18, 0xE2, 0xE1, 0x98, 0x15, 0x5D, 0x9C, 0x68, 0x4B, 0x94, 0x1A, 0x43, 0xF9, 0xC5, 0xE4, 0x46, 0x2C, 0xFE, 0x9F, 0x37, 0x0C, 0x4C, 0x66, 0x16, 0xBE, 0x9B, 0x62, 0x23, 0x7A, 0xB9, 0x71, 0xCC, 0x11, 0x88, 0xF0, 0x2D, 0x57, 0xF3, 0x0F, 0x20, 0x6B, 0x74, 0xD2, 0x55, 0xBA, 0xA7, 0x36, 0x58, 0xBF, 0x17, 0x7F, 0xE0, 0x39, 0x53, 0x28, 0x76, 0x6D, 0x02, 0x67, 0xD1, 0x34, 0x1F, 0xAB, 0x5B, 0x49, 0x13, 0x47, 0x65, 0x01, 0xBC, 0xB7, 0x4F, 0x12, 0x30, 0xFF, 0x2B, 0x21, 0x7D, 0x14, 0xA4, 0x03, 0xD8, 0x91, 0x9D, 0x7B, 0x3D, 0xF7, 0xD0, 0x31, 0x64, 0x3A, 0xB5, 0xDE, 0x19, 0x7E, 0x82, 0x70, 0x85, 0xB4, 0xB2, 0x93, 0x8B, 0x72, 0x8D, 0x56, 0xC4, 0xAD, 0xC2, 0xD6, 0x35, 0xEA, 0x77, 0xD7, 0x90, 0xE6, 0xB8, 0xF1, 0x2E, 0x33, 0xC0, 0xAA, 0xA6, 0xB0, 0x1D, 0xE8, 0x25, 0xA1, 0xD5, 0x61, 0x41, 0x5C, 0xCD, 0x83, 0xFC, 0xFB, 0xE9, 0x60, 0x81, 0x00, 0x32, 0xFA, 0xE3, 0x0E, 0xD9, 0x59, 0x9A, 0x4D, 0x7C, 0xC1, 0xA0, 0x5E, 0x69, 0xED, 0x22, 0xD4, 0x05, 0xAF, 0x50, 0x1B, 0x9E, 0x84, 0xA3, 0xEE, 0x6F, 0x1C, 0xA5, 0x86, 0xF5, 0x4A, 0xEB, 0xDB, 0xFD, 0x8F, 0x6C, 0xC6, 0xCE, 0xA8, 0x0D, 0xE5, 0x2A, 0x54, 0x6E, 0x79, 0xD3, 0x8E, 0x38, 0xF4, 0xEF, 0xB6, 0x5A, 0x75, 0x6A, 0x5F, 0x10, 0x07, 0x1E, 0x78, 0x8C, 0xBD, 0xF6, 0xC9, 0x06, 0x26, 0x42, 0xA9, 0x87, 0x8A, 0x96, 0x63, 0x3F, 0x80, 0x89, 0xC7, 0xC3, 0xDA, 0x97, 0x95, 0xB3, 0xAC, 0x08, 0x3B, 0x44, 0x45, 0x52, 0x51, 0xB1, 0xC8, 0xCF, 0x29, 0xAE, 0xEC, 0x40, 0x27, 0x0B, 0x2F, 0x99},
	{0x4D, 0xD7, 0xF1, 0x19, 0x0E, 0xC0, 0x5E, 0x8B, 0x2E, 0xF8, 0x80, 0x20, 0xD5, 0x91, 0x16, 0x33, 0xAC, 0xFB, 0x8E, 0x90, 0x7E, 0x2F, 0x5F, 0x1D, 0x61, 0x9E, 0x4C, 0x42, 0x21, 0xDF, 0x6C, 0x96, 0x92, 0x23, 0xBB, 0xBD, 0x69, 0x81, 0xEF, 0x36, 0x1C, 0xCA, 0x39, 0x6F, 0xC1, 0xE1, 0x66, 0x4E, 0xA8, 0x93, 0x02, 0xED, 0x62, 0xBF, 0x2A, 0x78, 0x59, 0xDB, 0x9B, 0x44, 0x24, 0x01, 0x29, 0x1B, 0x6D, 0xAB, 0xB7, 0xFA, 0xEC, 0x18, 0xD2, 0xCF, 0x9A, 0xF4, 0x37, 0xEB, 0x10, 0x6A, 0x3E, 0x9F, 0xBC, 0xFD, 0xF5, 0xB4, 0x70, 0x0B, 0x15, 0xC7, 0x27, 0x30, 0x47, 0xA2, 0x86, 0x12, 0xD4, 0x79, 0x99, 0xFC, 0xE5, 0xA9, 0x9C, 0x85, 0x3C, 0xAE, 0x3D, 0xCD, 0x84, 0xB8, 0xC9, 0x57, 0x3A, 0xC3, 0x9D, 0x3F, 0x40, 0x73, 0xFF, 0x7F, 0x46, 0xD9, 0x00, 0x3B, 0x7C, 0xA7, 0x58, 0x22, 0x09, 0x1A, 0xE0, 0x4B, 0xDC, 0x6E, 0xAD, 0x11, 0xFE, 0xDA, 0x0F, 0x06, 0x2B, 0x55, 0xF9, 0xD8, 0x5A, 0x97, 0x76, 0x74, 0xD0, 0xD3, 0xE8, 0x98, 0x54, 0x87, 0xDD, 0xB5, 0x4A, 0x89, 0x72, 0xC2, 0x43, 0xC8, 0x4F, 0x32, 0xA1, 0xF7, 0xE2, 0x25, 0xA6, 0xD6, 0x83, 0x8C, 0xA3, 0x75, 0x07, 0xB6, 0xC6, 0xEE, 0xD1, 0x50, 0x26, 0xAA, 0x60, 0x1E, 0x31, 0xCE, 0x2D, 0x95, 0x0D, 0xCC, 0xF0, 0x8D, 0xBA, 0xB1, 0x0A, 0xB3, 0x77, 0x8A, 0x52, 0xF2, 0xF6, 0x5D, 0x53, 0xC5, 0x7D, 0x08, 0x7B, 0x03, 0x5B, 0x6B, 0x88, 0x13, 0xF3, 0xC4, 0x94, 0x14, 0x49, 0x28, 0xB2, 0xA4, 0xEA, 0xE9, 0x04, 0xA5, 0xBE, 0x71, 0x68, 0x17, 0x0C, 0x64, 0xB0, 0xDE, 0x2C, 0x63, 0x35, 0xA0, 0x48, 0x8F, 0xE6, 0xE7, 0xCB, 0x56, 0xAF, 0x05, 0x38, 0x34, 0x5C, 0x51, 0xE4, 0x65, 0xE3, 0x41, 0x1F, 0x82, 0xB9, 0x7A, 0x67, 0x45},
	{0xC8, 0xF2, 0xE8, 0x1E, 0x13, 0x90, 0x4C, 0x7A, 0x66, 0x8D, 0x63, 0x75, 0x6B, 0x94, 0x4A, 0x88, 0x28, 0x52, 0x7D, 0x3C, 0x04, 0x71, 0x5B, 0xD2, 0x25, 0x8E, 0x34, 0x67, 0xBB, 0x0B, 0xAA, 0x29, 0x16, 0x72, 0x23, 0x0C, 0x47, 0x3A, 0x1C, 0x45, 0x6E, 0x9B, 0xDD, 0xCD, 0x65, 0x55, 0xAE, 0xA8, 0xFE, 0x96, 0xDE, 0x80, 0x42, 0xC2, 0xFA, 0x83, 0xE4, 0x22, 0xD9, 0xBC, 0xA2, 0xEC, 0x26, 0xEF, 0xA9, 0x91, 0xAC, 0x8C, 0x38, 0x68, 0x20, 0x69, 0x3E, 0x15, 0x2F, 0x54, 0x95, 0x19, 0xC4, 0x9D, 0x61, 0x8B, 0xFC, 0xD5, 0x8A, 0xB6, 0x6A, 0x1B, 0x3F, 0x4D, 0x7C, 0xBF, 0xB4, 0xF0, 0x70, 0xC5, 0x73, 0xD0, 0xCC, 0x6C, 0x2B, 0x7F, 0x5A, 0x03, 0xE9, 0x5E, 0x2A, 0x1A, 0x87, 0x5D, 0x12, 0x32, 0xCA, 0x5C, 0xD4, 0xBE, 0xB5, 0xFB, 0xEE, 0xA3, 0xE3, 0x3B, 0xD1, 0x8F, 0x6D, 0x81, 0x4F, 0xC6, 0x06, 0xEA, 0xA5, 0x17, 0xF3, 0xC9, 0x33, 0x48, 0xD6, 0xB3, 0x1D, 0xE1, 0x3D, 0x07, 0xBD, 0x78, 0x79, 0xF6, 0x9E, 0x02, 0xFF, 0xCF, 0xAD, 0x57, 0x41, 0xE0, 0xAB, 0x40, 0x9C, 0x14, 0xF9, 0x0D, 0x4E, 0xB8, 0xE6, 0xF8, 0xDA, 0x89, 0xF4, 0xA7, 0xB2, 0x7E, 0x50, 0xFD, 0xBA, 0x08, 0x05, 0x60, 0xC3, 0xE7, 0xC0, 0x98, 0xDF, 0x51, 0x53, 0xE2, 0xE5, 0x6F, 0x09, 0xED, 0x5F, 0x2E, 0xA6, 0x84, 0x01, 0x58, 0xA4, 0x31, 0xCE, 0x82, 0x62, 0x49, 0x56, 0x36, 0x77, 0x2C, 0xD7, 0x1F, 0x11, 0xA0, 0xB7, 0x35, 0x00, 0x10, 0x44, 0x2D, 0xCB, 0x99, 0x18, 0x92, 0xF7, 0x97, 0x24, 0x7B, 0x9F, 0xF5, 0x30, 0x9A, 0x86, 0xD8, 0x76, 0x85, 0xB9, 0x27, 0x43, 0xB0, 0x74, 0x37, 0x59, 0xF1, 0x0E, 0x0F, 0xB1, 0x21, 0x4B, 0x0A, 0xEB, 0xC7, 0xAF, 0xDC, 0xD3, 0xC1, 0x93, 0xDB, 0x46, 0x64, 0x39, 0xA1},
	{0x5D, 0xA0, 0x20, 0x43, 0x71, 0x22, 0x30, 0xDF, 0xE8, 0x9D, 0x3C, 0x89, 0xDE, 0x52, 0x9A, 0x80, 0x93, 0xDC, 0x08, 0x65, 0x05, 0x5C, 0xCB, 0x37, 0x5E, 0x27, 0x34, 0x5F, 0x9E, 0x6B, 0xFE, 0xA3, 0x69, 0x06, 0x47, 0xB9, 0x0B, 0x07, 0xD4, 0x58, 0x38, 0xC4, 0xBE, 0xBB, 0x64, 0xAE, 0xF2, 0xE5, 0x98, 0xAF, 0x18, 0x14, 0xEC, 0x4C, 0x74, 0xE2, 0x48, 0x33, 0xD0, 0xD1, 0x4B, 0x79, 0x3B, 0x41, 0xBC, 0x8C, 0xFF, 0x29, 0xBF, 0x21, 0xAB, 0x39, 0xAC, 0x56, 0xD7, 0x3F, 0xF1, 0x68, 0x3E, 0xA1, 0x6E, 0x10, 0xFD, 0xA5, 0x59, 0xA9, 0x1A, 0x4F, 0xB5, 0x75, 0xC9, 0x2B, 0x28, 0xE1, 0x7D, 0x11, 0x7B, 0x0F, 0x7C, 0x26, 0x0E, 0x99, 0xAA, 0xA7, 0xEF, 0xF7, 0x45, 0x90, 0x8E, 0x54, 0x83, 0xB6, 0xF8, 0x8F, 0x04, 0xA6, 0x0D, 0x57, 0xE9, 0xC0, 0xF3, 0x02, 0xF6, 0xCA, 0x9B, 0xE6, 0x84, 0x1B, 0x5A, 0x86, 0xCD, 0xD6, 0x3A, 0xF4, 0xB7, 0x50, 0x7A, 0x09, 0x87, 0x97, 0x53, 0x4A, 0x16, 0xC7, 0xFA, 0x73, 0x81, 0x2E, 0x60, 0x17, 0x9F, 0x61, 0xDB, 0xE7, 0x3D, 0xFB, 0xA2, 0x76, 0xBA, 0x66, 0xD9, 0x95, 0x85, 0xEB, 0x0C, 0x13, 0xEE, 0xB8, 0xE3, 0x25, 0x15, 0x94, 0xFC, 0x91, 0x92, 0x12, 0x55, 0xB3, 0x23, 0x36, 0x32, 0xED, 0xC6, 0x49, 0x4E, 0x78, 0xCF, 0x7F, 0xC8, 0xCE, 0x1D, 0x72, 0xDD, 0x19, 0xE0, 0x35, 0x62, 0xE4, 0xD8, 0x63, 0xB0, 0xB2, 0x00, 0xB1, 0x1E, 0x4D, 0x5B, 0x9C, 0x77, 0xC2, 0x6A, 0xF0, 0xDA, 0x1F, 0x03, 0x31, 0xCC, 0x96, 0xBD, 0xD3, 0x1C, 0x6D, 0x46, 0x2F, 0x42, 0x70, 0x6F, 0x67, 0xC5, 0xF5, 0x2A, 0x51, 0xD5, 0x24, 0x88, 0x2C, 0x44, 0x01, 0x8B, 0x8A, 0x0A, 0xC3, 0xF9, 0xEA, 0xB4, 0x6C, 0x8D, 0x82, 0x7E, 0xC1, 0xA8, 0xA4, 0x2D, 0xD2, 0xAD, 0x40},
	{0x5C, 0x31, 0xB0, 0x1F, 0x71, 0x1E, 0x69, 0x38, 0x2C, 0x28, 0x9A, 0xC1, 0xCE, 0x7B, 0x15, 0x35, 0xD8, 0xA6, 0x25, 0xF2, 0x8B, 0xA4, 0x11, 0xB2, 0xE4, 0x56, 0x00, 0x70, 0x84, 0x27, 0x3B, 0x8D, 0xA2, 0x64, 0x3A, 0xC2, 0xD0, 0xFF, 0x7C, 0xCD, 0xEE, 0x80, 0xC6, 0xD1, 0x61, 0x93, 0xBE, 0x96, 0xAB, 0xD4, 0x87, 0x1D, 0xC0, 0x8A, 0xBC, 0xD7, 0x0E, 0x2B, 0x21, 0x22, 0xE8, 0x09, 0x85, 0x17, 0xE2, 0x52, 0xF0, 0xED, 0x14, 0xB7, 0x91, 0x4E, 0x8C, 0xDE, 0xD6, 0x86, 0xA1, 0xFE, 0x66, 0x30, 0x59, 0xF6, 0xC8, 0xD9, 0x29, 0x07, 0xF8, 0x92, 0xBB, 0x48, 0x67, 0xD2, 0x7D, 0xEC, 0xF3, 0xB9, 0x19, 0x49, 0x24, 0x6C, 0xA9, 0x46, 0x74, 0x51, 0x6F, 0x37, 0xA7, 0x39, 0x55, 0x5F, 0x4C, 0x34, 0xE1, 0x62, 0x3E, 0x7F, 0xDD, 0x03, 0x40, 0x9F, 0x6D, 0x33, 0x9E, 0x8E, 0xE7, 0x05, 0x65, 0x10, 0x20, 0x9C, 0xC9, 0xC7, 0x2F, 0x45, 0x9D, 0xF4, 0xB6, 0x76, 0x4A, 0x89, 0x77, 0x0F, 0x8F, 0x2E, 0x1A, 0x4B, 0x43, 0x12, 0xE0, 0xAD, 0xAF, 0xCF, 0xFC, 0x5D, 0xCB, 0x08, 0x79, 0x6E, 0xDA, 0x16, 0xC4, 0x68, 0x53, 0x32, 0xA0, 0x90, 0xFD, 0x44, 0x36, 0x5A, 0xB5, 0xAA, 0x95, 0x78, 0x7E, 0xF5, 0xA5, 0x04, 0x60, 0x57, 0x02, 0x2D, 0x99, 0xC5, 0x72, 0xF1, 0xEF, 0xB3, 0x47, 0x88, 0x94, 0x2A, 0xBA, 0xFA, 0xF9, 0xBD, 0xEA, 0xE6, 0x9B, 0x0B, 0x13, 0x5B, 0x50, 0xBF, 0x7A, 0x97, 0xA3, 0x5E, 0xB4, 0xD3, 0xCC, 0x4F, 0x54, 0x18, 0x01, 0x0A, 0xE3, 0x58, 0x1C, 0x83, 0xE9, 0xDC, 0xDB, 0xCA, 0x3C, 0x23, 0xA8, 0x73, 0x63, 0xB1, 0x41, 0x3D, 0xEB, 0x0D, 0xF7, 0xB8, 0x1B, 0x26, 0xAC, 0x42, 0x75, 0x6B, 0x4D, 0x81, 0xC3, 0x0C, 0xD5, 0xAE, 0xDF, 0x82, 0x6A, 0xE5, 0x98, 0xFB, 0x06, 0x3F},
	{0x29, 0x10, 0x47, 0x6B, 0x48, 0x1E, 0x37, 0x69, 0xAE, 0x05, 0x75, 0xFA, 0x84, 0x4D, 0x52, 0xAB, 0x70, 0x31, 0xE9, 0xD6, 0x68, 0xC8, 0x33, 0x46, 0x4C, 0xE4, 0x0A, 0xC4, 0x5D, 0x0D, 0xA0, 0xA6, 0x9A, 0xE1, 0x95, 0x2F, 0xE0, 0xF2, 0xB0, 0xBF, 0x0B, 0x42, 0xF9, 0x73, 0xB6, 0x24, 0x81, 0xD3, 0xF0, 0xDC, 0xC0, 0xF1, 0xF3, 0x19, 0x83, 0x63, 0xBB, 0xD4, 0x9F, 0xEA, 0x2A, 0xE7, 0x5F, 0x11, 0x88, 0x44, 0x39, 0xFE, 0xBD, 0xCE, 0x6A, 0x6E, 0x91, 0x1A, 0x17, 0x92, 0x8A, 0xA8, 0xEE, 0x4B, 0xB8, 0xED, 0x6C, 0x0C, 0x2E, 0x76, 0x32, 0x85, 0x07, 0xDD, 0x38, 0xEC, 0x16, 0x02, 0x87, 0xB2, 0x01, 0x55, 0x94, 0x03, 0x9D, 0xF7, 0xDB, 0x04, 0xFF, 0xE8, 0x61, 0x53, 0x7D, 0x35, 0x6D, 0x97, 0x2C, 0xD0, 0xB5, 0x82, 0x06, 0xE3, 0xD5, 0x20, 0x43, 0x98, 0x14, 0x1C, 0x49, 0x71, 0x5A, 0xE2, 0xDF, 0x34, 0x4A, 0x09, 0x58, 0x3F, 0x7A, 0xBA, 0x50, 0x3A, 0x79, 0x12, 0x25, 0xF5, 0xAA, 0x7C, 0xC2, 0x77, 0xC1, 0x62, 0xA9, 0xD9, 0x27, 0xCF, 0x99, 0x67, 0x8C, 0x2B, 0xAC, 0xCB, 0x3C, 0xFB, 0xB4, 0xB9, 0xAF, 0x1F, 0x30, 0xD1, 0x28, 0x51, 0x4E, 0x9E, 0x08, 0x4F, 0xCA, 0x36, 0x96, 0xA5, 0xF6, 0x45, 0x54, 0x22, 0xEF, 0x74, 0x0F, 0x86, 0xBC, 0xCC, 0xA2, 0xF8, 0x65, 0x1B, 0x3E, 0xB7, 0x41, 0xF4, 0xC9, 0xDA, 0x89, 0x8F, 0x5B, 0x7E, 0x15, 0xFC, 0xAD, 0x93, 0xEB, 0x90, 0x3B, 0xA3, 0x8D, 0x64, 0x6F, 0x80, 0xC5, 0x40, 0x57, 0x9B, 0xE5, 0x3D, 0xA7, 0x00, 0xD7, 0xDE, 0x72, 0x7B, 0x18, 0x5E, 0x21, 0xB3, 0xD8, 0x26, 0x78, 0x5C, 0x60, 0xCD, 0x7F, 0xE6, 0xC3, 0x2D, 0x8E, 0xB1, 0x1D, 0xFD, 0xC7, 0x23, 0x9C, 0x56, 0x13, 0xA1, 0x66, 0xD2, 0xC6, 0x0E, 0x8B, 0xA4, 0x59, 0xBE},
	{0xB6, 0x2F, 0x72, 0x05, 0x31, 0x46, 0xC2, 0x4E, 0xE1, 0x34, 0x61, 0xB1, 0xA9, 0x52, 0x63, 0x92, 0x6C, 0x48, 0xE6, 0xE7, 0xAC, 0xFA, 0xA5, 0x06, 0x3A, 0x96, 0xCD, 0x36, 0x42, 0x23, 0x6D, 0x0E, 0x9E, 0xA6, 0xED, 0x98, 0xFB, 0x79, 0xDF, 0x5A, 0x82, 0xF3, 0x55, 0xCA, 0x35, 0x85, 0x91, 0x17, 0x6A, 0x7F, 0xD3, 0x02, 0x39, 0xB0, 0x1F, 0xA4, 0x70, 0x87, 0xA3, 0xCE, 0x5D, 0xF7, 0x9D, 0x7B, 0x50, 0x26, 0x93, 0x4D, 0xD9, 0xEF, 0x18, 0x2A, 0x7A, 0x20, 0xFE, 0x6F, 0xF1, 0x07, 0x0C, 0xCB, 0x4B, 0x1C, 0xC0, 0xFD, 0xFF, 0x14, 0x5F, 0xAD, 0x13, 0x59, 0x01, 0xC3, 0x9B, 0xDD, 0x8F, 0x45, 0xB8, 0xF2, 0xE8, 0x0A, 0x40, 0x67, 0xCF, 0x12, 0x60, 0x84, 0x78, 0xB3, 0x51, 0xD4, 0x57, 0xC1, 0x73, 0x33, 0x28, 0x2B, 0x47, 0xAA, 0x1E, 0xD0, 0xA1, 0x77, 0x5C, 0xB7, 0x2E, 0xE5, 0x66, 0x9C, 0x7D, 0x21, 0xF8, 0xBA, 0x4A, 0x37, 0x1D, 0x9A, 0x19, 0x5B, 0xDE, 0x0D, 0xA7, 0xFC, 0x16, 0x9F, 0x8D, 0xDC, 0xC7, 0x49, 0x38, 0xE9, 0xA2, 0x2C, 0xAB, 0xB2, 0xC6, 0xA8, 0xDB, 0xF6, 0x1A, 0x56, 0x8A, 0xBC, 0x03, 0x0B, 0x74, 0x32, 0x58, 0x4C, 0xE3, 0x8E, 0xEE, 0x90, 0x22, 0xA0, 0xC4, 0x3D, 0x62, 0x97, 0x53, 0xDA, 0x68, 0x00, 0xEB, 0x0F, 0x75, 0x3C, 0x8C, 0x76, 0xF4, 0x04, 0x1B, 0xAF, 0x99, 0xD1, 0x89, 0x30, 0x5E, 0x7E, 0x86, 0x43, 0x83, 0x54, 0x10, 0xCC, 0xF0, 0x29, 0x41, 0x3E, 0x3F, 0xD8, 0xE0, 0x2D, 0x88, 0x81, 0x27, 0xB5, 0x11, 0x6E, 0xC9, 0xB9, 0xD6, 0xEA, 0xBB, 0x64, 0x95, 0x08, 0x6B, 0xE4, 0xAE, 0x25, 0x8B, 0xE2, 0x24, 0xC8, 0xD5, 0x4F, 0xB4, 0x71, 0x09, 0xD2, 0xEC, 0xC5, 0x65, 0xF5, 0x94, 0x7C, 0xF9, 0xBD, 0x3B, 0x80, 0x44, 0xBE, 0x69, 0x15, 0xBF, 0xD7},
	{0x30, 0x5D, 0x57, 0x7C, 0x2F, 0x45, 0x65, 0xC2, 0x80, 0xCC, 0xB5, 0xAA, 0xFD, 0xB4, 0xAC, 0x91, 0x50, 0x9E, 0x10, 0xA6, 0x47, 0x6D, 0x48, 0x81, 0x06, 0x28, 0x53, 0x90, 0x00, 0x87, 0xCE, 0xF5, 0x25, 0x43, 0x29, 0xB3, 0x70, 0x92, 0x08, 0x01, 0x05, 0xEB, 0xA8, 0x7B, 0x0C, 0xD5, 0xD8, 0x0D, 0x8A, 0xD9, 0xB0, 0xBB, 0x4E, 0xC6, 0xDB, 0x5A, 0x3F, 0x4A, 0x55, 0x71, 0x2C, 0xF8, 0x1D, 0x97, 0xE2, 0x22, 0x59, 0x64, 0x67, 0xDD, 0x40, 0xCF, 0xA2, 0x89, 0x8E, 0xE8, 0x3C, 0xD6, 0x96, 0x8F, 0xA1, 0x38, 0x36, 0x88, 0xC3, 0x11, 0x93, 0x02, 0x52, 0xAE, 0xF7, 0x42, 0xE6, 0xCD, 0x49, 0x35, 0x1E, 0x37, 0xE9, 0x82, 0x20, 0xA4, 0xD7, 0x2A, 0x74, 0x75, 0x1B, 0x8D, 0xBC, 0x27, 0xDF, 0x6C, 0xE0, 0x95, 0x16, 0x1F, 0xC8, 0xE4, 0x07, 0xAF, 0xF3, 0xEC, 0xBD, 0x7E, 0x1A, 0xA0, 0x24, 0xB6, 0xB2, 0x7A, 0x69, 0x23, 0xA5, 0xFE, 0x39, 0x54, 0x9B, 0xF9, 0x13, 0xEE, 0xD0, 0x94, 0xAD, 0x9A, 0x4D, 0xDC, 0xCA, 0x03, 0xDA, 0xC5, 0x3D, 0x5F, 0x17, 0x98, 0xB7, 0x19, 0x0B, 0x83, 0xB8, 0x4F, 0x41, 0xC0, 0x61, 0x14, 0x6F, 0xFA, 0x15, 0x9F, 0xC9, 0xE1, 0xF4, 0x6A, 0xBF, 0x12, 0x4C, 0xDE, 0x51, 0x72, 0x2E, 0xD3, 0x9D, 0x7D, 0xE7, 0x5C, 0x46, 0xA9, 0x26, 0x79, 0xBA, 0xE5, 0x1C, 0x5E, 0x99, 0xFF, 0xB9, 0xD1, 0x73, 0xC4, 0xA3, 0xF0, 0xFB, 0x6E, 0x77, 0x6B, 0x84, 0xB1, 0x56, 0xE3, 0xAB, 0x68, 0x44, 0x5B, 0x8C, 0x18, 0x3E, 0x66, 0xF6, 0xCB, 0x31, 0xED, 0x0E, 0x3B, 0x63, 0xD2, 0x76, 0x09, 0x86, 0x0A, 0x9C, 0x60, 0x78, 0x21, 0xBE, 0xC1, 0xF2, 0xFC, 0x85, 0x2B, 0x04, 0xEA, 0x0F, 0x8B, 0x62, 0x4B, 0x3A, 0x2D, 0xC7, 0xF1, 0x34, 0xEF, 0xA7, 0x58, 0x33, 0xD4, 0x32, 0x7F},
	{0x0E, 0x4F, 0x77, 0x2E, 0xF2, 0xF5, 0x99, 0xFB, 0xE8, 0xB3, 0xB8, 0x17, 0x81, 0xB6, 0x42, 0x52, 0x44, 0x71, 0x3B, 0xC3, 0x33, 0x96, 0x61, 0x86, 0x6B, 0x14, 0xDC, 0xA3, 0xE2, 0x39, 0x80, 0x2B, 0xD3, 0xC0, 0x07, 0x0D, 0xE7, 0x9B, 0x62, 0x27, 0x38, 0xAD, 0x2F, 0x4C, 0x60, 0x20, 0x5B, 0x8F, 0x95, 0xB4, 0x59, 0x7C, 0x4A, 0x49, 0xF1, 0x92, 0x46, 0x6F, 0x0C, 0x25, 0x74, 0xE9, 0x88, 0x83, 0x0A, 0x03, 0x18, 0xD7, 0xC2, 0x26, 0xA7, 0xCA, 0x41, 0x9F, 0x1A, 0xFF, 0xAF, 0xFD, 0x2D, 0x32, 0x21, 0x56, 0x82, 0x7B, 0xA2, 0xB9, 0x9D, 0xAA, 0xC8, 0xA6, 0x00, 0xE5, 0xF3, 0x3A, 0x98, 0x6E, 0x3F, 0x7A, 0x04, 0xCC, 0xCB, 0xBA, 0x78, 0xE3, 0x35, 0x37, 0xCD, 0x8E, 0xDB, 0xD1, 0xC6, 0xA5, 0x72, 0xEA, 0x11, 0xF6, 0xD0, 0xDE, 0xFE, 0xC1, 0x8D, 0xE0, 0xCF, 0x1C, 0xE6, 0x57, 0xA4, 0xFC, 0xBC, 0xF4, 0xA1, 0x97, 0xDF, 0x0B, 0xC7, 0x08, 0x02, 0x79, 0x4D, 0x58, 0xBE, 0x12, 0x50, 0xDD, 0xD9, 0x0F, 0x9C, 0xD4, 0x30, 0x10, 0x4B, 0x3D, 0xBB, 0x1B, 0x89, 0x3E, 0x3C, 0xEE, 0xAB, 0xE4, 0xB1, 0x73, 0x13, 0xC5, 0xB2, 0x6C, 0xB0, 0x06, 0x05, 0xA0, 0xEC, 0xF7, 0x47, 0x87, 0xBD, 0x75, 0x54, 0x91, 0xF0, 0x23, 0xE1, 0x2C, 0x6A, 0x66, 0x8C, 0xF9, 0x64, 0x1E, 0x4E, 0x84, 0x70, 0x1D, 0x28, 0x5A, 0x94, 0x01, 0x29, 0xAE, 0x48, 0x6D, 0xB5, 0x31, 0x69, 0x55, 0x85, 0x5D, 0x9E, 0xD2, 0xBF, 0x24, 0xF8, 0xEB, 0x7F, 0x2A, 0x1F, 0x45, 0xC9, 0x65, 0x90, 0xB7, 0xA9, 0x22, 0xAC, 0xCE, 0x67, 0x40, 0x93, 0x8B, 0xED, 0x76, 0xD8, 0x5C, 0x19, 0x34, 0x5F, 0x8A, 0xFA, 0x09, 0x16, 0xEF, 0x53, 0xD5, 0xA8, 0x36, 0x7E, 0x7D, 0x15, 0x43, 0xD6, 0x5E, 0xDA, 0x51, 0xC4, 0x68, 0x63, 0x9A},
	{0x5A, 0x94, 0xEC, 0xFE, 0x4F, 0xCC, 0xD8, 0xC8, 0xFC, 0xA1, 0xB1, 0xF9, 0xD4, 0x84, 0x36, 0x4A, 0x2B, 0x95, 0x19, 0x7A, 0xB8, 0x4D, 0xB0, 0x69, 0x87, 0x03, 0x55, 0x28, 0xF5, 0xC0, 0xF1, 0xBE, 0x81, 0x96, 0x93, 0x15, 0xC3, 0x0A, 0xB2, 0xA3, 0x1F, 0x63, 0x0C, 0xF2, 0x00, 0xF4, 0xDE, 0xC7, 0x21, 0xA5, 0xFA, 0xB5, 0xEF, 0x5F, 0x75, 0xC5, 0x49, 0x1E, 0x6B, 0x8E, 0x6E, 0x56, 0x70, 0x65, 0x54, 0xC6, 0xAB, 0xB6, 0x37, 0x5D, 0x6C, 0x2F, 0xDF, 0xD3, 0xCD, 0x72, 0x66, 0xFB, 0x97, 0x11, 0x51, 0x2D, 0x7E, 0xDD, 0xFF, 0x89, 0xB4, 0x62, 0x42, 0x38, 0x58, 0x78, 0x0D, 0x90, 0xC4, 0x99, 0x1A, 0x18, 0xDA, 0x88, 0xE6, 0xF3, 0x52, 0x61, 0x76, 0x91, 0xE0, 0x9B, 0xAF, 0x86, 0x22, 0xE7, 0x6F, 0x1C, 0xBA, 0xE9, 0xD0, 0x2E, 0x13, 0xCA, 0x25, 0x73, 0xEE, 0x35, 0xB7, 0x5B, 0xF7, 0xED, 0xA0, 0x7B, 0xBD, 0x3A, 0x0E, 0xD6, 0x83, 0x3E, 0x59, 0xD1, 0xE8, 0x6D, 0xAD, 0x12, 0x60, 0xF8, 0x06, 0x29, 0xCF, 0x68, 0x31, 0xA4, 0x8B, 0x5E, 0x45, 0xE1, 0xF0, 0x67, 0xC9, 0x77, 0x39, 0x1D, 0x6A, 0x08, 0x4B, 0xD5, 0xE3, 0x9E, 0x24, 0x46, 0x7F, 0x80, 0xE2, 0x4C, 0x32, 0xAA, 0x8A, 0x8C, 0x64, 0x05, 0x8D, 0x5C, 0x02, 0x9C, 0x3C, 0x33, 0xDB, 0xB3, 0xCE, 0x07, 0x57, 0xC1, 0x7D, 0xE4, 0x3D, 0xFD, 0x0B, 0x20, 0x9F, 0xA2, 0xC2, 0x41, 0x10, 0x26, 0x74, 0xD7, 0x8F, 0x85, 0x2C, 0x40, 0x17, 0x04, 0x50, 0xBC, 0x98, 0xBB, 0x82, 0x92, 0x7C, 0x01, 0x09, 0xEA, 0x9D, 0xA8, 0x53, 0xDC, 0x2A, 0xD9, 0x44, 0xA6, 0xB9, 0xE5, 0xAC, 0x48, 0x1B, 0xA7, 0x34, 0x43, 0xBF, 0x4E, 0x71, 0x47, 0x14, 0x30, 0x3F, 0x16, 0xF6, 0xD2, 0x27, 0x9A, 0x23, 0x79, 0xA9, 0xAE, 0x0F, 0x3B, 0xEB, 0xCB},
	{0x70, 0xE6, 0x4E, 0xD1, 0x31, 0x37, 0xE9, 0xA3, 0x1B, 0x2E, 0x91, 0xC9, 0x28, 0x79, 0x73, 0x62, 0x32, 0xB0, 0x96, 0xC0, 0x6F, 0x1D, 0x24, 0x17, 0x97, 0xF7, 0xC2, 0x80, 0x26, 0xBD, 0x3F, 0x8C, 0x63, 0x30, 0x33, 0xAE, 0xCE, 0x11, 0xB7, 0x58, 0x77, 0xAC, 0xA1, 0x9F, 0x7F, 0xCB, 0x09, 0xD2, 0x16, 0xAD, 0x02, 0x4A, 0xA8, 0x4B, 0x9B, 0xD5, 0x55, 0xFC, 0x0F, 0x7A, 0x8D, 0xC3, 0x20, 0x5A, 0xB2, 0x5E, 0xA5, 0x66, 0x8B, 0x3E, 0xF2, 0x2C, 0x25, 0x29, 0x45, 0x01, 0xA6, 0xCA, 0x6C, 0x64, 0x9A, 0x49, 0x3A, 0xBC, 0xE2, 0xC5, 0x0C, 0x93, 0xF8, 0xCC, 0xC7, 0x18, 0x74, 0xE1, 0x83, 0x5C, 0x57, 0x1C, 0x65, 0xD9, 0x3C, 0xF9, 0x5F, 0x40, 0x0D, 0xED, 0xDE, 0x5D, 0x07, 0xC8, 0x41, 0x68, 0xB8, 0xDD, 0x38, 0x53, 0xCF, 0xE0, 0xBE, 0x39, 0x35, 0x36, 0xD3, 0x0A, 0x7D, 0xC6, 0x2A, 0xA0, 0xEA, 0xD0, 0xB6, 0x52, 0xDB, 0xF5, 0x2D, 0x06, 0x6A, 0x51, 0xF4, 0x90, 0x4C, 0x1A, 0xEE, 0xBA, 0xB5, 0x7C, 0x21, 0xFB, 0xBF, 0xE5, 0x05, 0x89, 0x4D, 0xEF, 0x44, 0x4F, 0x8E, 0x12, 0x88, 0x7B, 0x1F, 0x42, 0x9D, 0x23, 0x3D, 0xB9, 0xFD, 0x19, 0x95, 0x14, 0x46, 0x15, 0x48, 0x87, 0x9E, 0xB1, 0xD6, 0x1E, 0xA4, 0x13, 0x04, 0x82, 0xFF, 0xC1, 0x72, 0x3B, 0xFA, 0x34, 0x8A, 0xA2, 0x94, 0xF0, 0xE3, 0x76, 0x7E, 0x85, 0x67, 0xDA, 0x9C, 0xCD, 0x2B, 0x6E, 0x61, 0x84, 0x81, 0xE7, 0x69, 0xBB, 0x6D, 0xFE, 0x27, 0x2F, 0x50, 0x00, 0x54, 0xD4, 0xF1, 0xD7, 0xDF, 0x6B, 0xB4, 0xEB, 0x8F, 0x92, 0xB3, 0x99, 0x75, 0x5B, 0xF3, 0xAA, 0xEC, 0x43, 0xA9, 0x47, 0x08, 0xAB, 0x03, 0x98, 0xE8, 0xDC, 0xC4, 0x0B, 0xF6, 0x59, 0x22, 0xAF, 0xE4, 0x60, 0x71, 0x86, 0x0E, 0xD8, 0x56, 0x78, 0x10, 0xA7}}

var fcReverseTable = [][]byte{
	{0xDE, 0xCD, 0x6C, 0x86, 0xC3, 0x46, 0xE3, 0x85, 0x3F, 0x63, 0xB1, 0x8D, 0x1B, 0x29, 0x73, 0xF6, 0xB8, 0x52, 0xF4, 0x5F, 0xCE, 0x91, 0x3A, 0x2A, 0x6F, 0xCF, 0xB9, 0x44, 0xB7, 0xDF, 0xA9, 0xA1, 0xF2, 0x98, 0xEA, 0xC7, 0x70, 0x50, 0xD4, 0xCB, 0x05, 0x2C, 0x17, 0x07, 0x2D, 0x7A, 0xE2, 0x3B, 0x5D, 0xDD, 0x0B, 0x20, 0x2E, 0x15, 0xD8, 0x59, 0xEF, 0x74, 0x9D, 0xF0, 0xB0, 0xE6, 0x19, 0x1A, 0x22, 0xF7, 0x7D, 0x21, 0xBA, 0x0E, 0x9A, 0xEB, 0xBE, 0x39, 0x25, 0x3C, 0xCA, 0xF9, 0x67, 0x06, 0x95, 0x5E, 0x49, 0x92, 0xB2, 0x54, 0x40, 0x80, 0xC2, 0x0D, 0xE1, 0x30, 0x9E, 0xD6, 0xC5, 0xD2, 0x45, 0xA4, 0x6A, 0xD1, 0x64, 0xDC, 0x14, 0x5B, 0xDB, 0x27, 0x4A, 0x82, 0x7E, 0x18, 0x2B, 0xC4, 0x65, 0x66, 0x0A, 0x76, 0xEE, 0xCC, 0x81, 0xC6, 0x4E, 0x08, 0xE9, 0x28, 0x58, 0x03, 0x7C, 0x1D, 0xB5, 0x34, 0x16, 0x41, 0xC8, 0x68, 0xFD, 0x69, 0xBB, 0xFA, 0x51, 0x35, 0xF5, 0x37, 0x8B, 0x2F, 0x8E, 0x42, 0xB4, 0xA6, 0xF1, 0x9F, 0xE0, 0x13, 0x89, 0xA7, 0xA5, 0x56, 0x09, 0x4B, 0x38, 0x61, 0xD5, 0xD3, 0xAF, 0x6B, 0xC9, 0xDA, 0x99, 0x60, 0x84, 0x55, 0xBC, 0x8C, 0xEC, 0xA0, 0x43, 0x04, 0x12, 0x5A, 0x33, 0xD0, 0x3E, 0xA2, 0x10, 0x7B, 0xBF, 0xD9, 0xC1, 0x96, 0x1E, 0xF8, 0x48, 0x9C, 0x4F, 0x83, 0xED, 0xAD, 0x57, 0x79, 0x6D, 0x5C, 0x36, 0xAA, 0x00, 0x01, 0x77, 0x53, 0x3D, 0x02, 0x24, 0xA3, 0x4C, 0x47, 0x9B, 0xFE, 0x1C, 0x78, 0x87, 0x8A, 0xAB, 0x97, 0x26, 0x75, 0xAE, 0xE5, 0x62, 0xB6, 0x7F, 0xC0, 0x4D, 0x6E, 0x1F, 0xE8, 0x8F, 0xFC, 0x88, 0xE4, 0x90, 0x23, 0x71, 0xFF, 0x0C, 0x94, 0xB3, 0x72, 0xD7, 0xBD, 0xF3, 0xE7, 0x93, 0x31, 0x0F, 0xFB, 0x32, 0xAC, 0x11, 0xA8},
	{0x9E, 0x58, 0x4D, 0x64, 0x0F, 0xAF, 0xDD, 0xD6, 0xEF, 0x01, 0x12, 0xFD, 0x28, 0xC5, 0xA2, 0x3A, 0xD5, 0x34, 0x5C, 0x55, 0x62, 0x18, 0x2B, 0x45, 0x14, 0x71, 0x1E, 0xB2, 0xB8, 0x8F, 0xD7, 0x51, 0x3B, 0x60, 0xAD, 0x2F, 0x0E, 0x91, 0xDE, 0xFC, 0x4A, 0xF8, 0xC7, 0x5F, 0x24, 0x37, 0x89, 0xFE, 0x5D, 0x6C, 0x9F, 0x8A, 0x50, 0x81, 0x42, 0x27, 0xCD, 0x48, 0x6E, 0xF0, 0x11, 0x69, 0x0B, 0xE5, 0xFB, 0x95, 0xDF, 0x1F, 0xF1, 0xF2, 0x23, 0x56, 0x00, 0x54, 0xBC, 0x1C, 0x29, 0xA6, 0x03, 0x5B, 0xB1, 0xF4, 0xF3, 0x49, 0xC8, 0x3F, 0x7C, 0x38, 0x43, 0xA4, 0xD1, 0x53, 0x96, 0x19, 0xAA, 0xD4, 0x9C, 0x94, 0x2E, 0xE4, 0x6D, 0x57, 0x2A, 0x4E, 0x1B, 0xAB, 0xD3, 0x3C, 0xC1, 0x4C, 0xC9, 0xB7, 0x74, 0x32, 0x7A, 0x13, 0x3D, 0xD2, 0x4B, 0x83, 0xD8, 0xCA, 0x30, 0x68, 0xA7, 0x61, 0x72, 0x46, 0xE6, 0x9D, 0x73, 0x98, 0xB4, 0x75, 0xBA, 0xE1, 0x35, 0xE7, 0xE2, 0x79, 0xD9, 0x7B, 0xCC, 0xC0, 0x85, 0x66, 0x10, 0x78, 0x1D, 0xEC, 0xE3, 0xEB, 0x17, 0xFF, 0xA5, 0x2D, 0x1A, 0x67, 0xB3, 0x26, 0xA9, 0x92, 0x02, 0xB5, 0x63, 0xB9, 0x8D, 0x41, 0xC4, 0xE0, 0x8C, 0x52, 0xEE, 0x7E, 0xF9, 0xB0, 0x8E, 0xF5, 0x77, 0xED, 0x76, 0x6F, 0xD0, 0x5A, 0x87, 0x31, 0x40, 0x05, 0x59, 0xDA, 0x2C, 0x44, 0x8B, 0xA8, 0x7F, 0xE9, 0x7D, 0x21, 0xC2, 0xE8, 0xF6, 0xDC, 0x09, 0x0D, 0x33, 0x97, 0xC3, 0xF7, 0x6B, 0x4F, 0x3E, 0xCB, 0xAE, 0x93, 0x80, 0x84, 0x65, 0xA3, 0xEA, 0xBE, 0x06, 0x07, 0x70, 0x0C, 0x47, 0x16, 0x15, 0xA1, 0x22, 0xC6, 0x86, 0x04, 0x90, 0x9B, 0x82, 0xBD, 0xFA, 0xAC, 0xB6, 0xCF, 0x36, 0x88, 0x08, 0x39, 0xCE, 0xBB, 0xDB, 0x6A, 0x0A, 0x20, 0xA0, 0x9A, 0x99, 0xBF, 0x25, 0x5E},
	{0x78, 0x3D, 0x32, 0xCD, 0xDC, 0xF1, 0x89, 0xAC, 0xCB, 0x7E, 0xC0, 0x55, 0xE2, 0xBA, 0x04, 0x88, 0x4C, 0x85, 0x5D, 0xD1, 0xD5, 0x56, 0x0E, 0xE1, 0x45, 0x03, 0x7F, 0x3F, 0x28, 0x17, 0xB5, 0xFA, 0x0B, 0x1C, 0x7D, 0x21, 0x3C, 0xA5, 0xB2, 0x58, 0xD7, 0x3E, 0x36, 0x8A, 0xE6, 0xB8, 0x08, 0x15, 0x59, 0xB6, 0xA1, 0x0F, 0xF3, 0xE8, 0x27, 0x4A, 0xF2, 0x2A, 0x6E, 0x79, 0x66, 0x68, 0x4E, 0x71, 0x72, 0xF9, 0x1B, 0x9E, 0x3B, 0xFF, 0x76, 0x5A, 0xEA, 0xD6, 0x9A, 0x81, 0x1A, 0x00, 0x2F, 0xA0, 0xB1, 0xF5, 0xC4, 0xC8, 0x96, 0x8B, 0xEF, 0x6D, 0x7C, 0x38, 0x8E, 0xCE, 0xF4, 0xC7, 0x06, 0x16, 0xB4, 0x18, 0x34, 0xE7, 0xE3, 0xF7, 0x2E, 0xFE, 0xE0, 0x24, 0x4D, 0xCF, 0x1E, 0x40, 0x83, 0x2B, 0x54, 0xDF, 0x9C, 0x73, 0x91, 0xAB, 0x90, 0xC2, 0x37, 0x5F, 0xFD, 0xCC, 0x7A, 0xCA, 0x14, 0x75, 0x0A, 0x25, 0xFB, 0xA8, 0x6A, 0x65, 0x5C, 0x97, 0xD0, 0x9B, 0xC3, 0x07, 0xA9, 0xBD, 0x12, 0xEB, 0x13, 0x0D, 0x20, 0x31, 0xD4, 0xB9, 0x1F, 0x8F, 0x95, 0x60, 0x48, 0x3A, 0x64, 0x70, 0x19, 0x4F, 0xE9, 0xA2, 0x5B, 0xAA, 0xD9, 0xDD, 0xA6, 0x7B, 0x30, 0x63, 0xB3, 0x41, 0x10, 0x84, 0x67, 0xF0, 0xE4, 0xBF, 0xD8, 0xC1, 0x53, 0x99, 0xAD, 0x42, 0x6B, 0xFC, 0xBE, 0x22, 0x50, 0x23, 0xDE, 0x35, 0x05, 0x2C, 0x9D, 0x6F, 0xD3, 0xC9, 0xAE, 0x57, 0x9F, 0x6C, 0x29, 0xEE, 0xBB, 0x69, 0xB7, 0x47, 0x92, 0xB0, 0x46, 0x93, 0x5E, 0x0C, 0xA7, 0x01, 0x8D, 0x77, 0x87, 0x39, 0x82, 0x98, 0xE5, 0x1D, 0x80, 0x2D, 0xA4, 0xF8, 0xF6, 0x62, 0xEC, 0xED, 0x94, 0xDB, 0xDA, 0x4B, 0x44, 0x33, 0xAF, 0x26, 0xBC, 0x02, 0xC5, 0xD2, 0x49, 0x52, 0xC6, 0xA3, 0x09, 0x8C, 0x43, 0x11, 0x61, 0x51, 0x86, 0x74},
	{0xD2, 0xC0, 0x93, 0x67, 0x14, 0xAE, 0x80, 0x8D, 0xAD, 0xBA, 0xF3, 0x1D, 0x23, 0x9F, 0xEE, 0xEF, 0xD3, 0xCE, 0x6E, 0x04, 0x9D, 0x49, 0x20, 0x83, 0xD8, 0x4D, 0x6B, 0x57, 0x26, 0x8A, 0x03, 0xCD, 0x46, 0xF1, 0x39, 0x22, 0xDC, 0x18, 0x3E, 0xE7, 0x10, 0x1F, 0x6A, 0x64, 0xCB, 0xD5, 0xBD, 0x4A, 0xE0, 0xC3, 0x6F, 0x86, 0x1A, 0xD1, 0xC9, 0xEB, 0x44, 0xFE, 0x25, 0x79, 0x13, 0x8C, 0x48, 0x58, 0x9B, 0x98, 0x34, 0xE8, 0xD4, 0x27, 0xFC, 0x24, 0x87, 0xC7, 0x0E, 0xF2, 0x06, 0x59, 0xA0, 0x7E, 0xAA, 0xB5, 0x11, 0xB6, 0x4B, 0x2D, 0xC8, 0x97, 0xC1, 0xEC, 0x66, 0x16, 0x71, 0x6D, 0x69, 0xBC, 0xAF, 0x50, 0xC6, 0x0A, 0xFD, 0x2C, 0x08, 0x1B, 0x45, 0x47, 0x56, 0x0C, 0x63, 0x7C, 0x28, 0xB9, 0x5E, 0x15, 0x21, 0x60, 0xEA, 0x0B, 0xE4, 0xCA, 0x8F, 0x90, 0x07, 0xDD, 0x5A, 0x12, 0xA9, 0x65, 0x33, 0x7D, 0xC5, 0x37, 0xBF, 0xE5, 0xE2, 0x6C, 0x0F, 0xA5, 0x54, 0x51, 0x43, 0x09, 0x19, 0x7B, 0x05, 0x41, 0xD9, 0xFA, 0x0D, 0x4C, 0x31, 0xDB, 0xB3, 0xD7, 0xE1, 0x29, 0x9C, 0x4F, 0x92, 0xDE, 0xCF, 0xFF, 0x3C, 0x77, 0xC2, 0x82, 0xBE, 0xA7, 0x2F, 0x40, 0x1E, 0x9A, 0x42, 0x96, 0x2E, 0xF6, 0xE9, 0xF0, 0xA8, 0x89, 0x5C, 0x74, 0x55, 0xD0, 0xA1, 0xE6, 0xAC, 0x1C, 0x3B, 0x8E, 0x73, 0x5B, 0xB2, 0xF9, 0x35, 0xB0, 0x4E, 0x5F, 0x7F, 0xF5, 0x00, 0x85, 0x70, 0xD6, 0x62, 0x2B, 0xC4, 0x95, 0x61, 0x7A, 0x17, 0xF8, 0x72, 0x53, 0x88, 0xCC, 0xE3, 0x3A, 0xA4, 0xFB, 0xF7, 0x2A, 0x32, 0xB4, 0x99, 0x8B, 0xB7, 0x78, 0x38, 0xB8, 0xA2, 0xB1, 0x02, 0x68, 0x81, 0xF4, 0x3D, 0xBB, 0x76, 0x3F, 0x5D, 0xED, 0x01, 0x84, 0xA6, 0xDF, 0x91, 0xDA, 0xA3, 0x9E, 0x36, 0x75, 0x52, 0xAB, 0x30, 0x94},
	{0xCA, 0xED, 0x79, 0xD6, 0x72, 0x14, 0x21, 0x25, 0x12, 0x89, 0xF0, 0x24, 0xA4, 0x74, 0x64, 0x61, 0x51, 0x5F, 0xAF, 0xA5, 0x33, 0xAA, 0x8E, 0x95, 0x32, 0xC1, 0x56, 0x7F, 0xDC, 0xBE, 0xCC, 0xD5, 0x02, 0x45, 0x05, 0xB2, 0xE9, 0xA9, 0x63, 0x19, 0x5C, 0x43, 0xE6, 0x5B, 0xEB, 0xFC, 0x93, 0xDF, 0x06, 0xD7, 0xB4, 0x39, 0x1A, 0xC3, 0xB3, 0x17, 0x28, 0x47, 0x84, 0x3E, 0x0A, 0x9A, 0x4E, 0x4B, 0xFF, 0x3F, 0xE0, 0x03, 0xEC, 0x6A, 0xDE, 0x22, 0x38, 0xB7, 0x8D, 0x3C, 0x35, 0xCD, 0xB8, 0x57, 0x87, 0xE7, 0x0D, 0x8C, 0x6D, 0xB0, 0x49, 0x75, 0x27, 0x54, 0x80, 0xCE, 0x15, 0x00, 0x18, 0x1B, 0x94, 0x97, 0xC4, 0xC7, 0x2C, 0x13, 0x9F, 0xE3, 0x4D, 0x20, 0xD2, 0x1D, 0xF5, 0xDD, 0x50, 0xE2, 0xE1, 0x04, 0xBF, 0x91, 0x36, 0x59, 0x9D, 0xD0, 0xB9, 0x3D, 0x88, 0x60, 0x62, 0x5E, 0xF8, 0xBB, 0x0F, 0x92, 0xF7, 0x6E, 0x7E, 0xA2, 0x81, 0x8A, 0xEA, 0x0B, 0xEF, 0xEE, 0x41, 0xF6, 0x6C, 0x71, 0x6B, 0xAD, 0xAE, 0x10, 0xAB, 0xA1, 0xD9, 0x8B, 0x30, 0x65, 0x0E, 0x7C, 0xCF, 0x09, 0x1C, 0x96, 0x01, 0x4F, 0x9C, 0x1F, 0xFB, 0x53, 0x73, 0x67, 0xFA, 0x55, 0x66, 0x46, 0x48, 0xFE, 0x2D, 0x31, 0xC8, 0xCB, 0xC9, 0xB1, 0xF4, 0x58, 0x6F, 0x86, 0xA7, 0x23, 0x9E, 0x2B, 0x40, 0xDA, 0x2A, 0x44, 0x77, 0xF9, 0xD1, 0xF1, 0x29, 0xE4, 0xB6, 0x8F, 0xBC, 0x5A, 0x7B, 0x16, 0xD8, 0x82, 0xBD, 0xBA, 0x3A, 0x3B, 0xFD, 0xDB, 0x26, 0xE8, 0x83, 0x4A, 0xC6, 0xA0, 0xD4, 0x98, 0x11, 0xC0, 0x0C, 0x07, 0xC2, 0x5D, 0x37, 0xA8, 0xC5, 0x2F, 0x7D, 0x99, 0x08, 0x76, 0xF3, 0xA3, 0x34, 0xB5, 0xA6, 0x68, 0xD3, 0x4C, 0x2E, 0x78, 0x85, 0xE5, 0x7A, 0x69, 0x70, 0xF2, 0x90, 0x9B, 0xAC, 0x52, 0x1E, 0x42},
	{0x1A, 0xD6, 0xB4, 0x75, 0xB1, 0x7D, 0xFE, 0x55, 0x9B, 0x3D, 0xD7, 0xC7, 0xF5, 0xE9, 0x38, 0x8D, 0x7F, 0x16, 0x93, 0xC8, 0x44, 0x0E, 0x9F, 0x3F, 0xD5, 0x60, 0x90, 0xEC, 0xDA, 0x33, 0x05, 0x03, 0x80, 0x3A, 0x3B, 0xE1, 0x62, 0x12, 0xED, 0x1D, 0x09, 0x54, 0xBF, 0x39, 0x08, 0xB5, 0x8F, 0x84, 0x4F, 0x01, 0xA3, 0x79, 0x6F, 0x0F, 0xA8, 0x69, 0x07, 0x6B, 0x22, 0x1E, 0xE0, 0xE7, 0x72, 0xFF, 0x76, 0xE6, 0xEF, 0x92, 0xA7, 0x85, 0x65, 0xBC, 0x59, 0x61, 0x8A, 0x91, 0x6E, 0xF2, 0x47, 0xD3, 0xCA, 0x67, 0x41, 0xA2, 0xD4, 0x6C, 0x19, 0xB3, 0xD9, 0x50, 0xA9, 0xC9, 0x00, 0x99, 0xCF, 0x6D, 0xB2, 0x2C, 0x71, 0xE4, 0x21, 0x7E, 0x4E, 0x5A, 0xA1, 0x06, 0xFA, 0xF1, 0x63, 0x78, 0x9D, 0x68, 0x1B, 0x04, 0xB8, 0xE3, 0x66, 0xF0, 0x89, 0x8C, 0xAD, 0x9C, 0xCC, 0x0D, 0x26, 0x5C, 0xAE, 0x73, 0x29, 0xF3, 0xF9, 0xDB, 0x1C, 0x3E, 0x4B, 0x32, 0xBD, 0x8B, 0x35, 0x14, 0x48, 0x1F, 0x7B, 0x8E, 0xA5, 0x46, 0x57, 0x2D, 0xBE, 0xAC, 0x2F, 0xCD, 0xFC, 0xB6, 0x0A, 0xC6, 0x81, 0x86, 0x7A, 0x77, 0xA4, 0x4C, 0x20, 0xCE, 0x15, 0xB0, 0x11, 0x6A, 0xE2, 0x64, 0xAB, 0x30, 0xEE, 0x95, 0xF7, 0x96, 0x02, 0xE5, 0x17, 0xBB, 0xD0, 0xAA, 0x88, 0x45, 0xEB, 0x5F, 0xC0, 0x58, 0x36, 0xC3, 0x2E, 0xCB, 0x34, 0x0B, 0x23, 0xF4, 0xA0, 0xB7, 0x2A, 0x83, 0x52, 0x82, 0xDF, 0x9A, 0xD2, 0x27, 0x0C, 0x97, 0x24, 0x2B, 0x5B, 0xD1, 0x31, 0xF6, 0x4A, 0x37, 0x10, 0x53, 0x9E, 0xDE, 0xDD, 0x74, 0x49, 0xF8, 0x94, 0x70, 0x40, 0xD8, 0x18, 0xFB, 0xC5, 0x7C, 0x3C, 0xDC, 0xC4, 0xE8, 0x5D, 0x43, 0x28, 0xBA, 0x42, 0xB9, 0x13, 0x5E, 0x87, 0xAF, 0x51, 0xEA, 0x56, 0xC2, 0xC1, 0xFD, 0x98, 0xA6, 0x4D, 0x25},
	{0xDB, 0x60, 0x5D, 0x63, 0x67, 0x09, 0x74, 0x58, 0xAA, 0x83, 0x1A, 0x28, 0x53, 0x1D, 0xFB, 0xB6, 0x01, 0x3F, 0x8B, 0xF6, 0x7A, 0xC8, 0x5C, 0x4A, 0xE0, 0x35, 0x49, 0xBD, 0x7B, 0xF0, 0x05, 0xA3, 0x77, 0xE2, 0xB3, 0xF3, 0x2D, 0x8C, 0xE5, 0x96, 0xA6, 0x00, 0x3C, 0x9B, 0x70, 0xED, 0x54, 0x23, 0xA4, 0x11, 0x56, 0x16, 0x81, 0x6D, 0xAD, 0x06, 0x5A, 0x42, 0x89, 0xCE, 0x9E, 0xD9, 0xBE, 0x85, 0xD5, 0xC0, 0x29, 0x78, 0x41, 0xB1, 0x17, 0x02, 0x04, 0x7C, 0x82, 0x4F, 0x18, 0x0D, 0xA8, 0xAB, 0x88, 0xA7, 0x0E, 0x6B, 0xB2, 0x61, 0xF5, 0xD6, 0x84, 0xFE, 0x7E, 0xC6, 0xE7, 0x1C, 0xE1, 0x3E, 0xE8, 0x6A, 0x93, 0x37, 0xD1, 0xBC, 0xF8, 0x99, 0x14, 0x07, 0x46, 0x03, 0x52, 0x6E, 0x47, 0xD2, 0x10, 0x7D, 0xDE, 0x2B, 0xB5, 0x0A, 0x55, 0x91, 0xE6, 0x8A, 0x86, 0xDF, 0x8F, 0x6C, 0xC7, 0xEA, 0xD3, 0x2E, 0x73, 0x36, 0x0C, 0x57, 0xB7, 0x5E, 0x40, 0xC4, 0x4C, 0xFC, 0x9A, 0xD0, 0xEE, 0xC5, 0xCD, 0x48, 0x4B, 0xCB, 0x62, 0x22, 0xAE, 0x6F, 0x79, 0x98, 0x20, 0xD7, 0xF4, 0x64, 0xA9, 0x3A, 0x1E, 0xF7, 0xBA, 0xCF, 0xFD, 0xAF, 0x1F, 0xDA, 0x4D, 0x94, 0x8E, 0x0F, 0x9C, 0xCA, 0x08, 0xA2, 0x26, 0xEF, 0x5F, 0xE3, 0xA0, 0x72, 0x2C, 0xBF, 0x50, 0xA1, 0x87, 0x38, 0xB8, 0x44, 0xFF, 0x27, 0x32, 0x92, 0x90, 0xEC, 0x1B, 0xD4, 0xFA, 0xF2, 0x15, 0xC2, 0xAC, 0x9D, 0xB9, 0xE9, 0x45, 0x97, 0x71, 0xA5, 0xF9, 0x2F, 0x39, 0x76, 0x13, 0xDC, 0xE4, 0x95, 0xC3, 0x66, 0x31, 0x59, 0xDD, 0x80, 0x24, 0x21, 0x7F, 0x75, 0x19, 0xD8, 0xEB, 0x3D, 0x69, 0x12, 0x3B, 0xCC, 0x5B, 0x51, 0x4E, 0xB4, 0x30, 0x33, 0x25, 0x34, 0xC1, 0x8D, 0xB0, 0x65, 0xBB, 0x2A, 0x0B, 0x9F, 0xC9, 0xF1, 0x43, 0x68},
	{0xB5, 0x5A, 0x33, 0xA2, 0xBD, 0x03, 0x17, 0x4D, 0xE1, 0xEE, 0x63, 0xA3, 0x4E, 0x8B, 0x1F, 0xB7, 0xCA, 0xD8, 0x67, 0x58, 0x55, 0xFD, 0x8E, 0x2F, 0x46, 0x88, 0x9E, 0xBE, 0x51, 0x86, 0x76, 0x36, 0x49, 0x81, 0xAC, 0x1D, 0xE8, 0xE5, 0x41, 0xD6, 0x72, 0xCD, 0x47, 0x73, 0x97, 0xD3, 0x7C, 0x01, 0xC3, 0x04, 0xA5, 0x71, 0x09, 0x2C, 0x1B, 0x85, 0x94, 0x34, 0x18, 0xF8, 0xB9, 0xAF, 0xCF, 0xD0, 0x64, 0xCE, 0x1C, 0xC7, 0xFA, 0x5F, 0x05, 0x74, 0x11, 0x93, 0x84, 0x50, 0xA7, 0x43, 0x07, 0xEB, 0x40, 0x6C, 0x0D, 0xB2, 0xC9, 0x2A, 0x9F, 0x6E, 0xA6, 0x59, 0x27, 0x89, 0x7A, 0x3C, 0xC4, 0x56, 0x68, 0x0A, 0xB0, 0x0E, 0xDF, 0xF2, 0x7E, 0x65, 0xB4, 0xFC, 0x30, 0xE2, 0x10, 0x1E, 0xD9, 0x4B, 0x38, 0xED, 0x02, 0x70, 0xA4, 0xB8, 0xBB, 0x79, 0x6A, 0x25, 0x48, 0x3F, 0xF5, 0x80, 0xC5, 0x31, 0xF9, 0xD5, 0x28, 0xC8, 0x69, 0x2D, 0xC6, 0x39, 0xD4, 0xC2, 0xA0, 0xE6, 0xBA, 0x90, 0xA9, 0x5E, 0xAB, 0x2E, 0x0F, 0x42, 0xF4, 0xE0, 0x19, 0xB1, 0x23, 0xC0, 0x87, 0x5C, 0x7F, 0x3E, 0x20, 0x8F, 0xAD, 0x78, 0x96, 0x3A, 0x37, 0x16, 0x21, 0x8C, 0x9B, 0x0C, 0x75, 0x98, 0x14, 0x57, 0xE4, 0xBF, 0x35, 0x0B, 0x99, 0x6B, 0xEC, 0xD7, 0x00, 0x7B, 0x60, 0xDB, 0x83, 0xDE, 0xA1, 0xF7, 0xFB, 0xFE, 0x52, 0x6F, 0x06, 0x5B, 0xAE, 0xF1, 0x9A, 0x92, 0xE9, 0xDA, 0x2B, 0x4F, 0xCB, 0x1A, 0x3B, 0x66, 0x77, 0xC1, 0xEF, 0x32, 0x6D, 0xEA, 0xDC, 0xFF, 0xD1, 0x44, 0xB3, 0x9C, 0x91, 0x5D, 0x8A, 0x26, 0xD2, 0x08, 0xE7, 0xA8, 0xE3, 0x7D, 0x12, 0x13, 0x62, 0x95, 0xDD, 0xB6, 0xF0, 0x22, 0xAA, 0x45, 0xCC, 0x4C, 0x61, 0x29, 0xBC, 0xF3, 0x9D, 0x3D, 0x82, 0xF6, 0x15, 0x24, 0x8D, 0x53, 0x4A, 0x54},
	{0x1C, 0x27, 0x57, 0x93, 0xEE, 0x28, 0x18, 0x76, 0x26, 0xE1, 0xE3, 0x9C, 0x2C, 0x2F, 0xDC, 0xF0, 0x12, 0x55, 0xAD, 0x8A, 0xA3, 0xA6, 0x72, 0x98, 0xD5, 0x9B, 0x7C, 0x6A, 0xBE, 0x3E, 0x60, 0x73, 0x64, 0xE7, 0x41, 0x83, 0x7E, 0x20, 0xBA, 0x6D, 0x19, 0x22, 0x67, 0xED, 0x3C, 0xF5, 0xB2, 0x04, 0x00, 0xDA, 0xFE, 0xFC, 0xF8, 0x5F, 0x52, 0x61, 0x51, 0x86, 0xF4, 0xDD, 0x4C, 0x96, 0xD6, 0x38, 0x46, 0xA0, 0x5B, 0x21, 0xD2, 0x05, 0xB8, 0x14, 0x16, 0x5E, 0x39, 0xF3, 0xAE, 0x90, 0x34, 0x9F, 0x10, 0xB0, 0x58, 0x1A, 0x87, 0x3A, 0xCE, 0x02, 0xFB, 0x42, 0x37, 0xD3, 0xB7, 0x01, 0xBF, 0x97, 0xE5, 0xA2, 0xF2, 0xDE, 0x43, 0x06, 0xD7, 0x44, 0xD1, 0x82, 0xAB, 0xCB, 0x6F, 0x15, 0xC9, 0xA4, 0x24, 0x3B, 0xB1, 0xC4, 0x68, 0x69, 0xE0, 0xCA, 0xE6, 0xBB, 0x81, 0x2B, 0x03, 0xB5, 0x7B, 0xFF, 0x08, 0x17, 0x63, 0x9D, 0xCC, 0xEC, 0xE2, 0x1D, 0x53, 0x49, 0x30, 0xF1, 0xD4, 0x6B, 0x4A, 0x4F, 0x1B, 0x0F, 0x25, 0x56, 0x8D, 0x71, 0x4E, 0x3F, 0x99, 0xC0, 0x8F, 0x88, 0xE4, 0xB4, 0x11, 0xA7, 0x7D, 0x50, 0x48, 0xC6, 0x65, 0x84, 0x13, 0xFA, 0x2A, 0xB9, 0x0B, 0xD0, 0x0E, 0x8E, 0x59, 0x77, 0x32, 0xCD, 0x80, 0x23, 0x0D, 0x0A, 0x7F, 0x9A, 0x9E, 0xC2, 0xBC, 0x33, 0x6C, 0x7A, 0xE8, 0xAC, 0xA1, 0xE9, 0x07, 0x54, 0xC5, 0x95, 0x35, 0xF6, 0x74, 0xA8, 0x92, 0xD9, 0x09, 0x5D, 0x1E, 0x47, 0x8C, 0xC3, 0xDF, 0xB3, 0xFD, 0x2D, 0x4D, 0x66, 0x2E, 0x31, 0x94, 0x36, 0x91, 0x45, 0xAF, 0x6E, 0x70, 0xA9, 0x40, 0xCF, 0x75, 0xBD, 0x5C, 0xB6, 0x4B, 0x62, 0xEF, 0x29, 0x79, 0xDB, 0x8B, 0xF9, 0xC7, 0xF7, 0xEA, 0x78, 0xAA, 0x1F, 0xD8, 0x5A, 0x3D, 0x89, 0xA5, 0xC8, 0xEB, 0x0C, 0x85, 0xC1},
	{0x5A, 0xC3, 0x88, 0x41, 0x62, 0xA8, 0xA7, 0x22, 0x87, 0xED, 0x40, 0x85, 0x3A, 0x23, 0x00, 0x91, 0x95, 0x72, 0x8D, 0xA2, 0x19, 0xF6, 0xEE, 0x0B, 0x42, 0xE8, 0x4A, 0x99, 0x7B, 0xBF, 0xBB, 0xD6, 0x2D, 0x50, 0xDD, 0xB3, 0xD1, 0x3B, 0x45, 0x27, 0xC0, 0xC4, 0xD5, 0x1F, 0xB5, 0x4E, 0x03, 0x2A, 0x94, 0xC9, 0x4F, 0x14, 0xE9, 0x68, 0xF3, 0x69, 0x28, 0x1D, 0x5D, 0x12, 0x9C, 0x97, 0x9B, 0x60, 0xE1, 0x48, 0x0E, 0xF7, 0x10, 0xD7, 0x38, 0xAC, 0xC6, 0x35, 0x34, 0x96, 0x2B, 0x8A, 0xBC, 0x01, 0x8E, 0xFB, 0x0F, 0xF0, 0xB0, 0xCB, 0x51, 0x7D, 0x8B, 0x32, 0xC1, 0x2E, 0xE7, 0xCD, 0xF9, 0xEA, 0x2C, 0x16, 0x26, 0xFE, 0xBA, 0xD9, 0xB7, 0xE0, 0xFD, 0xCA, 0xB6, 0x18, 0xA5, 0xC7, 0x5F, 0x39, 0xBE, 0x11, 0x70, 0xA1, 0x3C, 0xAF, 0xE5, 0x02, 0x66, 0x89, 0x61, 0x53, 0x33, 0xF5, 0xF4, 0xD4, 0x1E, 0x0C, 0x52, 0x3F, 0xBD, 0xCC, 0x17, 0xAD, 0x3E, 0x9A, 0xEB, 0xE3, 0xB8, 0x78, 0x6B, 0x2F, 0xDA, 0xB1, 0x37, 0xE2, 0xC2, 0x30, 0x15, 0x83, 0x5E, 0x06, 0xFF, 0x25, 0x92, 0x56, 0xCE, 0x49, 0xA9, 0x82, 0x54, 0x1B, 0x7E, 0x6F, 0x59, 0x46, 0xF2, 0xDC, 0x57, 0x9E, 0xDE, 0x29, 0xC5, 0x4C, 0xA6, 0xA0, 0xA4, 0x09, 0x31, 0xC8, 0x0D, 0xDB, 0x0A, 0x55, 0x65, 0x98, 0x80, 0xAE, 0x8C, 0xD0, 0x21, 0x77, 0x44, 0x13, 0xFC, 0xA3, 0x6E, 0x86, 0x58, 0xD8, 0x47, 0x64, 0x63, 0x6A, 0xDF, 0x7A, 0x74, 0x6D, 0xCF, 0x20, 0x93, 0xF1, 0xF8, 0x43, 0xE6, 0x90, 0xFA, 0x6C, 0x1A, 0x8F, 0x75, 0x84, 0x79, 0xB4, 0x1C, 0x67, 0x9F, 0x5B, 0x7C, 0x24, 0x08, 0x3D, 0x71, 0xD3, 0xAA, 0xE4, 0x9D, 0xEF, 0xB2, 0x36, 0x04, 0x5C, 0x81, 0x05, 0x73, 0xAB, 0xD2, 0xB9, 0xEC, 0x07, 0x7F, 0x4D, 0x76, 0x4B},
	{0x2C, 0xD9, 0xB4, 0x19, 0xD1, 0xB1, 0x90, 0xBB, 0xA1, 0xDA, 0x25, 0xC2, 0x2A, 0x5C, 0x84, 0xFC, 0xC8, 0x4F, 0x8D, 0x76, 0xF0, 0x23, 0xF3, 0xD0, 0x61, 0x12, 0x60, 0xE8, 0x71, 0x9F, 0x39, 0x28, 0xC3, 0x30, 0x6E, 0xF8, 0xA6, 0x78, 0xC9, 0xF6, 0x1B, 0x91, 0xE0, 0x10, 0xCE, 0x51, 0x75, 0x47, 0xF1, 0x94, 0xAC, 0xB7, 0xEA, 0x7B, 0x0E, 0x44, 0x59, 0x9E, 0x83, 0xFD, 0xB6, 0xC0, 0x87, 0xF2, 0xCF, 0xC7, 0x58, 0xEB, 0xE2, 0x98, 0xA7, 0xEF, 0xE7, 0x38, 0x0F, 0xA2, 0xAB, 0x15, 0xED, 0x04, 0xD2, 0x50, 0x66, 0xDE, 0x40, 0x1A, 0x3D, 0xBC, 0x5A, 0x88, 0x00, 0x7D, 0xB3, 0x45, 0x97, 0x35, 0x8E, 0x67, 0x57, 0x29, 0xB0, 0x3F, 0x4C, 0x9B, 0x93, 0x17, 0xA0, 0x3A, 0x46, 0x8B, 0x3C, 0x70, 0x3E, 0xEE, 0x4B, 0x79, 0xCA, 0x36, 0x68, 0x9D, 0x5B, 0xF9, 0x13, 0x81, 0xD8, 0xBE, 0x52, 0xA8, 0xA9, 0x20, 0xD6, 0x86, 0x0D, 0xCD, 0x6D, 0x18, 0x63, 0x55, 0xAE, 0x96, 0xAF, 0xB2, 0x3B, 0xCC, 0x5D, 0x69, 0xD7, 0x22, 0x01, 0x11, 0x21, 0x4E, 0xD4, 0x5F, 0xF7, 0x6B, 0xB5, 0xDC, 0xA5, 0xC4, 0x80, 0x09, 0xC5, 0x27, 0x95, 0x31, 0xE3, 0xE9, 0xDD, 0xFA, 0xAD, 0x42, 0xE6, 0x8C, 0xFB, 0x6C, 0x16, 0x0A, 0x26, 0xB9, 0x56, 0x33, 0x43, 0x7C, 0x14, 0xE4, 0x72, 0xD5, 0xD3, 0x82, 0x1F, 0xEC, 0x1D, 0xBD, 0xC6, 0x24, 0x5E, 0x37, 0x41, 0x2F, 0x07, 0x9C, 0x77, 0xFF, 0x05, 0x4A, 0xBA, 0x92, 0x74, 0x89, 0xF5, 0x49, 0x0C, 0xA3, 0x85, 0xCB, 0x06, 0xE1, 0x62, 0xB8, 0xDF, 0x53, 0x2E, 0x48, 0x6A, 0x99, 0xAA, 0xA4, 0xBF, 0xE5, 0x64, 0x6F, 0x8A, 0x73, 0xDB, 0xFE, 0x02, 0x7F, 0x7A, 0x34, 0x9A, 0x1E, 0x2B, 0x65, 0x2D, 0x1C, 0xF4, 0x7E, 0x8F, 0x0B, 0x32, 0x4D, 0x08, 0xC1, 0x03, 0x54},
	{0xD5, 0x4B, 0x32, 0xEC, 0xB4, 0x96, 0x87, 0x6C, 0xEA, 0x2E, 0x7B, 0xF1, 0x56, 0x68, 0xFA, 0x3A, 0xFE, 0x25, 0x9D, 0xB3, 0xA9, 0xAB, 0x30, 0x17, 0x5B, 0xA7, 0x8D, 0x08, 0x61, 0x15, 0xB1, 0xA0, 0x3E, 0x92, 0xF4, 0xA3, 0x16, 0x48, 0x1C, 0xD2, 0x0C, 0x49, 0x7E, 0xC8, 0x47, 0x86, 0x09, 0xD3, 0x21, 0x04, 0x10, 0x22, 0xBB, 0x78, 0x79, 0x05, 0x72, 0x77, 0x52, 0xB9, 0x64, 0xA4, 0x45, 0x1E, 0x67, 0x6E, 0xA1, 0xE7, 0x9A, 0x4A, 0xAA, 0xE9, 0xAC, 0x51, 0x33, 0x35, 0x8C, 0x98, 0x02, 0x9B, 0xD4, 0x89, 0x83, 0x73, 0xD6, 0x38, 0xFC, 0x60, 0x27, 0xF3, 0x3F, 0xE3, 0x5F, 0x6B, 0x41, 0x66, 0xF7, 0xCA, 0x0F, 0x20, 0x4F, 0x62, 0x43, 0xC4, 0x6F, 0xCE, 0x88, 0xDB, 0x4E, 0xD0, 0xC9, 0x14, 0x00, 0xF8, 0xB8, 0x0E, 0x5C, 0xE2, 0xC1, 0x28, 0xFD, 0x0D, 0x3B, 0x9F, 0x91, 0x7C, 0xC2, 0x2C, 0x1B, 0xCC, 0xB5, 0x5E, 0xCB, 0xC3, 0xF9, 0xAD, 0x9E, 0x97, 0xBC, 0x44, 0x1F, 0x3C, 0x9C, 0xDE, 0x8B, 0x0A, 0xDF, 0x57, 0xBE, 0xA8, 0x12, 0x18, 0xED, 0xE1, 0x50, 0x36, 0xC6, 0xA2, 0xAE, 0x2B, 0x7F, 0x2A, 0xBD, 0x07, 0xB2, 0x42, 0x4C, 0xFF, 0x34, 0xE8, 0xE5, 0xEB, 0x29, 0x31, 0x23, 0xF5, 0x11, 0xAF, 0x40, 0xE0, 0xDC, 0x90, 0x82, 0x26, 0x70, 0xA5, 0x8F, 0xCF, 0x53, 0x1D, 0x76, 0x94, 0x13, 0xB7, 0x1A, 0x3D, 0xF0, 0x55, 0x7D, 0x5A, 0x6D, 0x0B, 0x4D, 0x2D, 0x59, 0xC7, 0x24, 0x74, 0x81, 0x03, 0x2F, 0x7A, 0xD7, 0x37, 0xB0, 0xD9, 0xFB, 0x63, 0xC5, 0x84, 0xEF, 0x71, 0x6A, 0xDA, 0x75, 0x5D, 0x54, 0xC0, 0xF6, 0x95, 0x01, 0xCD, 0xEE, 0x06, 0x80, 0xDD, 0xE6, 0x69, 0x8E, 0x99, 0xBF, 0xD8, 0x46, 0xE4, 0x8A, 0x85, 0xF2, 0x19, 0x58, 0x65, 0xBA, 0x93, 0x39, 0xA6, 0xD1, 0xB6}}

var mxTcpTable0 = [256]byte{0x3F, 0xAF, 0x25, 0x93, 0xBD, 0xB4, 0x23, 0xF3, 0x55, 0xB9, 0xC5, 0xAD, 0x31, 0xB1, 0x8B, 0x48,
	0x2E, 0x27, 0xB6, 0xDD, 0xD6, 0x74, 0x99, 0xEF, 0x5C, 0x19, 0x90, 0x46, 0x59, 0xFC, 0x7D, 0xAB,
	0x52, 0x5B, 0x5D, 0x07, 0x33, 0xF4, 0x12, 0x15, 0x82, 0x26, 0x0E, 0xB8, 0x62, 0x4A, 0xFA, 0xEE,
	0x69, 0x3A, 0x06, 0x57, 0x0A, 0x72, 0xF9, 0x2D, 0x9B, 0x35, 0x28, 0xC9, 0xE2, 0x88, 0xF0, 0xEB,
	0x21, 0x49, 0x4B, 0x44, 0x18, 0x2A, 0x13, 0xE1, 0x95, 0x60, 0x36, 0xE3, 0x0D, 0x84, 0xFF, 0xBE,
	0xA6, 0xE6, 0x20, 0x6C, 0x8F, 0x71, 0x37, 0xD7, 0x50, 0xC6, 0xF7, 0x65, 0xFE, 0x75, 0xA9, 0x0C,
	0xD9, 0xEA, 0x0B, 0x64, 0xF8, 0x70, 0x6B, 0x4D, 0xAE, 0x83, 0xEC, 0x6F, 0x6D, 0xBF, 0xD8, 0xE4,
	0xBB, 0x4F, 0x42, 0xDC, 0x6E, 0x02, 0x98, 0xDA, 0x22, 0x24, 0xC1, 0x53, 0xD2, 0x3C, 0x38, 0xE5,
	0x17, 0x0F, 0x9A, 0x1C, 0x78, 0x81, 0x45, 0x7E, 0x3B, 0x86, 0xA1, 0x97, 0x5F, 0x73, 0x1B, 0x94,
	0xF2, 0xD1, 0x43, 0xCE, 0x7C, 0xA5, 0xFD, 0x11, 0x58, 0x7B, 0x91, 0x01, 0x7F, 0x76, 0xDF, 0x77,
	0xE0, 0x9F, 0xBC, 0x7A, 0xCF, 0x30, 0xA4, 0x32, 0x34, 0x9C, 0x54, 0xCA, 0x3D, 0xE7, 0x56, 0x89,
	0x08, 0xB2, 0x6A, 0x67, 0x16, 0xDB, 0xC7, 0xE8, 0x03, 0xED, 0x40, 0x1F, 0x63, 0xD0, 0xF6, 0x61,
	0x9D, 0x8A, 0x9E, 0xB5, 0x29, 0x47, 0xC8, 0x1A, 0x8E, 0x80, 0x5A, 0xCC, 0x68, 0x2C, 0xD4, 0xDE,
	0xC4, 0x39, 0xA2, 0x4E, 0x79, 0x1E, 0xA8, 0xCD, 0xA0, 0xD3, 0x96, 0xF5, 0xB0, 0x66, 0x05, 0x00,
	0xF1, 0xAC, 0xC2, 0xE9, 0xD5, 0x85, 0x04, 0xA3, 0x51, 0xFB, 0x8D, 0x09, 0x2B, 0x4C, 0x5E, 0xBA,
	0x10, 0x41, 0xB3, 0x92, 0xA7, 0x87, 0x3E, 0x8C, 0xC3, 0xB7, 0xAA, 0x2F, 0x14, 0x1D, 0xCB, 0xC0}

var mxTcpTable1 = [256]byte{0xDF, 0x9B, 0x75, 0xB8, 0xE6, 0xDE, 0x32, 0x23, 0xB0, 0xEB, 0x34, 0x62, 0x5F, 0x4C, 0x2A, 0x81,
	0xF0, 0x97, 0x26, 0x46, 0xFC, 0x27, 0xB4, 0x80, 0x44, 0x19, 0xC7, 0x8E, 0x83, 0xFD, 0xD5, 0xBB,
	0x52, 0x40, 0x78, 0x06, 0x79, 0x02, 0x29, 0x11, 0x3A, 0xC4, 0x45, 0xEC, 0xCD, 0x37, 0x10, 0xFB,
	0xA5, 0x0C, 0xA7, 0x24, 0xA8, 0x39, 0x4A, 0x56, 0x7E, 0xD1, 0x31, 0x88, 0x7D, 0xAC, 0xF6, 0x00,
	0xBA, 0xF1, 0x72, 0x92, 0x43, 0x86, 0x1B, 0xC5, 0x0F, 0x41, 0x2D, 0x42, 0xED, 0x67, 0xD3, 0x71,
	0x58, 0xE8, 0x20, 0x7B, 0xAA, 0x08, 0xAE, 0x33, 0x98, 0x1C, 0xCA, 0x21, 0x18, 0x22, 0xEE, 0x8C,
	0x49, 0xBF, 0x2C, 0xBC, 0x63, 0x5B, 0xDD, 0xB3, 0xCC, 0x30, 0xB2, 0x66, 0x53, 0x6C, 0x74, 0x6B,
	0x65, 0x55, 0x35, 0x8D, 0x15, 0x5D, 0x9D, 0x9F, 0x84, 0xD4, 0xA3, 0x99, 0x94, 0x1E, 0x87, 0x9C,
	0xC9, 0x85, 0x28, 0x69, 0x4D, 0xE5, 0x89, 0xF5, 0x3D, 0xAF, 0xC1, 0x0E, 0xF7, 0xEA, 0xC8, 0x54,
	0x1A, 0x9A, 0xF3, 0x03, 0x8F, 0x48, 0xDA, 0x8B, 0x76, 0x16, 0x82, 0x38, 0xA9, 0xC0, 0xC2, 0xA1,
	0xD8, 0x8A, 0xD2, 0xE7, 0xA6, 0x95, 0x50, 0xF4, 0xD6, 0x5E, 0xFA, 0x1F, 0xE1, 0x0B, 0x68, 0x01,
	0xDC, 0x0D, 0xB1, 0xF2, 0x05, 0xC3, 0x12, 0xF9, 0x2B, 0x09, 0xEF, 0x70, 0xA2, 0x04, 0x4F, 0x6D,
	0xFF, 0x7A, 0xE2, 0xF8, 0xD0, 0x0A, 0x59, 0xB6, 0xC6, 0x3B, 0xAB, 0xFE, 0xCB, 0xD7, 0x93, 0xA4,
	0xBD, 0x91, 0x7C, 0xD9, 0xCE, 0xE4, 0x14, 0x57, 0x6E, 0x60, 0x77, 0xB5, 0x73, 0x13, 0xCF, 0x9E,
	0xA0, 0x47, 0x3C, 0x4B, 0x6F, 0x7F, 0x51, 0xAD, 0xB7, 0xE3, 0x61, 0x3F, 0x6A, 0xB9, 0x2F, 0x17,
	0x3E, 0xE0, 0x90, 0x07, 0x25, 0xDB, 0xBE, 0x5A, 0x64, 0x36, 0x2E, 0xE9, 0x1D, 0x96, 0x5C, 0x4E}

var mxTcpTable2 = [256]byte{0xD2, 0x3A, 0x74, 0xAF, 0xB5, 0xA9, 0xCE, 0x93, 0x46, 0x96, 0x47, 0xCD, 0xA8, 0x69, 0xF7, 0x23,
	0x81, 0x78, 0xFB, 0x13, 0x8D, 0x2D, 0x45, 0x8E, 0x1B, 0xAE, 0x0F, 0x22, 0xB9, 0x38, 0x67, 0x4A,
	0xE4, 0x27, 0xAA, 0x52, 0x20, 0x4C, 0x99, 0x3C, 0x29, 0x94, 0x30, 0xE8, 0xBC, 0x42, 0x7B, 0xFD,
	0xE5, 0xFC, 0x40, 0x91, 0x3B, 0xEF, 0x4F, 0xF2, 0xBA, 0x65, 0x31, 0xF3, 0xE0, 0xA5, 0x18, 0xDB,
	0x66, 0x2E, 0x43, 0x6B, 0xB4, 0xB6, 0x50, 0x2A, 0x12, 0xF9, 0x36, 0xF8, 0x8A, 0x2F, 0xC7, 0xB3,
	0xB2, 0xE6, 0xC3, 0x33, 0x76, 0x72, 0x80, 0xF5, 0x92, 0xAB, 0x85, 0x10, 0xC2, 0xCB, 0x97, 0x1D,
	0xD4, 0xCF, 0x54, 0x58, 0xC5, 0x48, 0x4D, 0x5F, 0xC1, 0xB7, 0x5C, 0x25, 0x34, 0xF0, 0x73, 0xEB,
	0xAD, 0x14, 0xBF, 0x5E, 0x06, 0x1F, 0xFE, 0x61, 0x71, 0xEA, 0x01, 0x24, 0x7D, 0x08, 0x9D, 0x84,
	0x5B, 0x2B, 0x4E, 0xF4, 0x41, 0x57, 0xA3, 0x53, 0x00, 0x0B, 0x5D, 0x0C, 0x1E, 0xA1, 0x3F, 0x4B,
	0x1C, 0x64, 0x28, 0x8C, 0x9A, 0x60, 0xC6, 0x26, 0x19, 0xCC, 0x63, 0x88, 0xF1, 0x09, 0x8F, 0x0D,
	0x04, 0xBD, 0x8B, 0xD5, 0xDC, 0x9F, 0x87, 0xDE, 0xBE, 0x7E, 0x95, 0x51, 0xC8, 0x5A, 0x11, 0xDA,
	0x70, 0x3D, 0x68, 0x7F, 0x3E, 0xE9, 0xC9, 0x59, 0xD7, 0x6E, 0x79, 0x6A, 0x15, 0xD0, 0x77, 0x89,
	0x6F, 0xA2, 0x02, 0x86, 0xE3, 0x90, 0xA6, 0x9E, 0x6C, 0x05, 0x0E, 0xFA, 0xD3, 0xD9, 0x62, 0x6D,
	0x16, 0xC0, 0xE2, 0x03, 0x83, 0x17, 0xD6, 0xA4, 0x0A, 0x7C, 0x39, 0x1A, 0xDF, 0xEC, 0x21, 0x2C,
	0xB0, 0x44, 0x9B, 0xBB, 0x75, 0x07, 0x7A, 0xC4, 0xA0, 0xA7, 0xF6, 0xB8, 0xB1, 0xAC, 0xFF, 0xED,
	0xCA, 0x82, 0xE1, 0xD1, 0x9C, 0x98, 0x55, 0xD8, 0xE7, 0x56, 0xEE, 0x35, 0x49, 0xDD, 0x32, 0x37}

var mxTcpTable3 = [256]byte{0x88, 0x7A, 0xC2, 0xD3, 0xA0, 0xC9, 0x74, 0xE5, 0x7D, 0x9D, 0xD8, 0x89, 0x8B, 0x9F, 0xCA, 0x1A,
	0x5B, 0xAE, 0x48, 0x13, 0x71, 0xBC, 0xD0, 0xD5, 0x3E, 0x98, 0xDB, 0x18, 0x90, 0x5F, 0x8C, 0x75,
	0x24, 0xDE, 0x1B, 0x0F, 0x7B, 0x6B, 0x97, 0x21, 0x92, 0x28, 0x47, 0x81, 0xDF, 0x15, 0x41, 0x4D,
	0x2A, 0x3A, 0xFE, 0x53, 0x6C, 0xFB, 0x4A, 0xFF, 0x1D, 0xDA, 0x01, 0x34, 0x27, 0xB1, 0xB4, 0x8E,
	0x32, 0x84, 0x2D, 0x42, 0xE1, 0x16, 0x08, 0x0A, 0x65, 0xFC, 0x1F, 0x8F, 0x25, 0x66, 0x82, 0x36,
	0x46, 0xAB, 0x23, 0x87, 0x62, 0xF6, 0xF9, 0x85, 0x63, 0xB7, 0xAD, 0x80, 0x6A, 0x8A, 0x73, 0x67,
	0x95, 0x77, 0xCE, 0x9A, 0x91, 0x39, 0x40, 0x1E, 0xB2, 0x0D, 0xBB, 0x43, 0xC8, 0xCF, 0xB9, 0xC0,
	0xB0, 0x78, 0x55, 0x6E, 0x02, 0xE4, 0x54, 0xBE, 0x11, 0xBA, 0xE6, 0x2E, 0xD9, 0x7C, 0xA9, 0xB3,
	0x56, 0x10, 0xF1, 0xD4, 0x7F, 0x5A, 0xC3, 0xA6, 0x9B, 0xBF, 0x4C, 0xA2, 0x93, 0x14, 0x17, 0x9E,
	0xC5, 0x33, 0x58, 0x07, 0x29, 0xAA, 0x09, 0x5E, 0xF5, 0x26, 0x94, 0xE2, 0xF4, 0x7E, 0xC7, 0xA5,
	0xE8, 0x8D, 0xC1, 0x86, 0xD7, 0x3D, 0xC6, 0xE9, 0x0C, 0x05, 0x22, 0x59, 0xED, 0x70, 0x19, 0x03,
	0xE0, 0xEC, 0x50, 0x4F, 0x44, 0x04, 0x45, 0x69, 0xEB, 0x1C, 0x38, 0xE3, 0x2C, 0xA1, 0xA8, 0x72,
	0xD1, 0x68, 0x5C, 0x52, 0xE7, 0x64, 0x96, 0x4E, 0xAC, 0xB6, 0xF0, 0x5D, 0x99, 0x0B, 0x06, 0x61,
	0xBD, 0xF3, 0x00, 0xCC, 0x60, 0xA3, 0xD6, 0xB8, 0xF7, 0xCD, 0xAF, 0x3F, 0xA4, 0xFD, 0xA7, 0xDC,
	0x3C, 0xF2, 0xD2, 0xC4, 0x20, 0x30, 0x51, 0xF8, 0x2B, 0xB5, 0x79, 0x6F, 0xDD, 0xEF, 0xFA, 0x35,
	0x6D, 0x9C, 0x37, 0x3B, 0x83, 0x57, 0xEA, 0x0E, 0x4B, 0x49, 0xCB, 0x12, 0x31, 0x2F, 0x76, 0xEE}

var mxTcpTable4 = [512]byte{0x16, 0x24, 0xED, 0x25, 0xA8, 0x55, 0x5D, 0x1A, 0xE1, 0x03, 0x68, 0x4C, 0x4E, 0xFA, 0xFD, 0x6E,
	0x3A, 0xEA, 0xF1, 0xF4, 0xF6, 0x21, 0x9D, 0x7F, 0x44, 0xCF, 0x2D, 0x4D, 0x0D, 0x96, 0x63, 0x13,
	0x8F, 0xDC, 0x07, 0xC9, 0xEB, 0x3E, 0x31, 0x4A, 0xA4, 0xA6, 0x7A, 0x72, 0xF0, 0x04, 0xE3, 0x6C,
	0x05, 0x19, 0xB7, 0x48, 0x3D, 0xAB, 0x14, 0xF3, 0xBA, 0xD6, 0xD9, 0xB5, 0x0B, 0x6B, 0xD4, 0x77,
	0xD7, 0x8D, 0x58, 0x2E, 0x87, 0xE6, 0x66, 0x40, 0x34, 0xFC, 0x18, 0xF5, 0x85, 0xDE, 0x27, 0xC6,
	0x1B, 0x7C, 0x20, 0x11, 0xC8, 0x90, 0x8B, 0x6F, 0x28, 0x94, 0x17, 0xA1, 0x54, 0xE7, 0xEC, 0x12,
	0xE2, 0x00, 0xF8, 0xA5, 0xD5, 0x8E, 0xDA, 0xC3, 0x22, 0xFB, 0x80, 0xB8, 0xD1, 0x6A, 0x39, 0x51,
	0xF2, 0x7E, 0x5E, 0x06, 0xBF, 0x4B, 0x82, 0x98, 0x8A, 0x61, 0xE9, 0x49, 0x7D, 0x1C, 0xAF, 0x99,
	0x9A, 0x46, 0xC0, 0x83, 0x0A, 0x15, 0xC1, 0xA0, 0x1F, 0xEF, 0xA9, 0x5C, 0xDB, 0x86, 0xB3, 0xAC,
	0x1E, 0x42, 0x81, 0x69, 0x3F, 0xDF, 0xD2, 0xB4, 0x26, 0x9B, 0x56, 0x29, 0x62, 0x6D, 0x09, 0xA2,
	0xE0, 0x3C, 0x36, 0xCD, 0x88, 0x74, 0x65, 0x95, 0x92, 0xC7, 0xB1, 0x30, 0x76, 0xC2, 0x3B, 0x2B,
	0xD8, 0x5F, 0x35, 0x10, 0x75, 0x2C, 0x8C, 0x60, 0xAD, 0x08, 0x84, 0xD3, 0xE5, 0x5A, 0xA7, 0xCB,
	0x0C, 0x2A, 0x33, 0x37, 0x32, 0x23, 0xBE, 0x59, 0xC4, 0xCA, 0xB2, 0xBD, 0x7B, 0x97, 0x4F, 0xB9,
	0xA3, 0xAE, 0xB0, 0xC5, 0x0E, 0x45, 0x73, 0x71, 0x57, 0x5B, 0xF9, 0xFE, 0x41, 0xEE, 0x91, 0x93,
	0x79, 0xB6, 0xAA, 0x47, 0x38, 0x89, 0x01, 0x64, 0xBB, 0x2F, 0x1D, 0x9E, 0xDD, 0xD0, 0x78, 0x50,
	0x43, 0xE8, 0x70, 0xE4, 0xCC, 0x52, 0x02, 0x67, 0xF7, 0x9C, 0xBC, 0xCE, 0x0F, 0x53, 0x9F, 0xFF,
	0x61, 0xE6, 0xF6, 0x09, 0x2D, 0x30, 0x73, 0x22, 0xB9, 0x9E, 0x84, 0x3C, 0xC0, 0x1C, 0xD4, 0xFC,
	0xB3, 0x53, 0x5F, 0x1F, 0x36, 0x85, 0x00, 0x5A, 0x4A, 0x31, 0x07, 0x50, 0x7D, 0xEA, 0x90, 0x88,
	0x52, 0x15, 0x68, 0xC5, 0x01, 0x03, 0x98, 0x4E, 0x58, 0x9B, 0xC1, 0xAF, 0xB5, 0x1A, 0x43, 0xE9,
	0xAB, 0x26, 0xC4, 0xC2, 0x48, 0xB2, 0xA2, 0xC3, 0xE4, 0x6E, 0x10, 0xAE, 0xA1, 0x34, 0x25, 0x94,
	0x47, 0xDC, 0x91, 0xF0, 0x18, 0xD5, 0x81, 0xE3, 0x33, 0x7B, 0x27, 0x75, 0x0B, 0x1B, 0x0C, 0xCE,
	0xEF, 0x6F, 0xF5, 0xFD, 0x5C, 0x05, 0x9A, 0xD8, 0x42, 0xC7, 0xBD, 0xD9, 0x8B, 0x06, 0x72, 0xB1,
	0xB7, 0x79, 0x9C, 0x1E, 0xE7, 0xA6, 0x46, 0xF7, 0x0A, 0x93, 0x6D, 0x3D, 0x2F, 0x9D, 0x0F, 0x57,
	0xF2, 0xD7, 0x2B, 0xD6, 0xA5, 0xB4, 0xAC, 0x3F, 0xEE, 0xE0, 0x2A, 0xCC, 0x51, 0x7C, 0x71, 0x17,
	0x6A, 0x92, 0x76, 0x83, 0xBA, 0x4C, 0x8D, 0x44, 0xA4, 0xE5, 0x78, 0x56, 0xB6, 0x41, 0x65, 0x20,
	0x55, 0xDE, 0xA8, 0xDF, 0x59, 0xA7, 0x1D, 0xCD, 0x77, 0x7F, 0x80, 0x99, 0xF9, 0x16, 0xEB, 0xFE,
	0x87, 0x5B, 0x9F, 0xD0, 0x28, 0x63, 0x29, 0xBE, 0x04, 0x8A, 0xE2, 0x35, 0x8F, 0xB8, 0xD1, 0x7E,
	0xD2, 0xAA, 0xCA, 0x8E, 0x97, 0x3B, 0xE1, 0x32, 0x6B, 0xCF, 0x38, 0xE8, 0xFA, 0xCB, 0xC6, 0x74,
	0x82, 0x86, 0xAD, 0x67, 0xC8, 0xD3, 0x4F, 0xA9, 0x54, 0x23, 0xC9, 0xBF, 0xF4, 0xA3, 0xFB, 0x19,
	0xED, 0x6C, 0x96, 0xBB, 0x3E, 0x64, 0x39, 0x40, 0xB0, 0x3A, 0x66, 0x8C, 0x21, 0xEC, 0x4D, 0x95,
	0xA0, 0x08, 0x60, 0x2E, 0xF3, 0xBC, 0x45, 0x5D, 0xF1, 0x7A, 0x11, 0x24, 0x5E, 0x02, 0xDD, 0x89,
	0x2C, 0x12, 0x70, 0x37, 0x13, 0x4B, 0x14, 0xF8, 0x62, 0xDA, 0x0D, 0x69, 0x49, 0x0E, 0xDB, 0xFF}

var mxTcpTable6 = [256]byte{0xAD, 0x33, 0x6E, 0x35, 0x3B, 0x91, 0x63, 0x45, 0x50, 0x4F, 0xF9, 0x23, 0x60, 0xF2, 0xF4, 0x02,
	0x3E, 0xD5, 0x69, 0x94, 0xD3, 0xFF, 0x98, 0x29, 0xB4, 0xF3, 0x6C, 0xA0, 0x52, 0x9F, 0x90, 0xCF,
	0xDD, 0x30, 0x0F, 0x70, 0xCC, 0x86, 0x7B, 0xD8, 0x38, 0x9D, 0xFE, 0x21, 0xB8, 0x78, 0x6D, 0x1F,
	0x8E, 0x8C, 0x40, 0x7F, 0x4D, 0x3C, 0x9A, 0x1C, 0xF0, 0x11, 0x41, 0x44, 0xEA, 0x5F, 0xC2, 0xAA,
	0x22, 0xD4, 0xDE, 0x20, 0x36, 0x97, 0x2E, 0x13, 0xCD, 0x03, 0x77, 0x07, 0x17, 0x75, 0x68, 0x59,
	0xAC, 0xD6, 0xB6, 0xE4, 0x2C, 0x79, 0x55, 0x54, 0x34, 0x8A, 0xA5, 0xE5, 0xEC, 0xC9, 0x2F, 0x09,
	0x4E, 0xE3, 0xD2, 0xCA, 0x4A, 0x06, 0x0B, 0xA7, 0xA1, 0xC4, 0x85, 0xAB, 0x89, 0x27, 0x93, 0x42,
	0x81, 0x9E, 0x05, 0xAE, 0xDB, 0xE8, 0x8B, 0x74, 0x00, 0x61, 0x8F, 0xDA, 0x3A, 0xF5, 0xBC, 0xE2,
	0x12, 0x9B, 0xC5, 0x87, 0x6B, 0xB1, 0x2A, 0xC8, 0x95, 0xA6, 0x88, 0xB5, 0x56, 0xA3, 0x48, 0x46,
	0x64, 0x9C, 0xBE, 0xA2, 0x67, 0xA4, 0xEB, 0x5B, 0x71, 0x83, 0xB2, 0xE6, 0x6F, 0x2B, 0xC0, 0x31,
	0x1E, 0xA9, 0x57, 0xA8, 0x6A, 0x62, 0xB7, 0x5A, 0x8D, 0x82, 0x1B, 0x28, 0x47, 0x39, 0x0C, 0x7C,
	0xB9, 0xEE, 0x01, 0x14, 0x0D, 0x04, 0x51, 0x49, 0xF7, 0xD9, 0xB0, 0x2D, 0x1A, 0xEF, 0xBA, 0x43,
	0x84, 0xAF, 0xD0, 0xFD, 0x96, 0xC1, 0xC6, 0xF8, 0x16, 0x25, 0xF1, 0x5E, 0x7E, 0x58, 0x08, 0x0E,
	0xE0, 0x66, 0xC7, 0x26, 0x24, 0x80, 0x5C, 0x10, 0xE7, 0x3F, 0x92, 0xED, 0x53, 0xBF, 0xE9, 0x18,
	0x73, 0xE1, 0xD1, 0xF6, 0xDF, 0xFB, 0xFC, 0x76, 0xD7, 0x19, 0x5D, 0x65, 0xBD, 0x1D, 0x7A, 0x72,
	0x3D, 0x4B, 0x4C, 0x99, 0x0A, 0xCE, 0x32, 0xC3, 0x37, 0xCB, 0xFA, 0xB3, 0x7D, 0x15, 0xBB, 0xDC}

var mxTcpTable7 = [256]byte{0x78, 0xB2, 0x0F, 0x49, 0xB5, 0x72, 0x65, 0x4B, 0xCE, 0x5F, 0xF4, 0x66, 0xAE, 0xB4, 0xCF, 0x22,
	0xD7, 0x39, 0x80, 0x47, 0xB3, 0xFD, 0xC8, 0x4C, 0xDF, 0xE9, 0xBC, 0xAA, 0x37, 0xED, 0xA0, 0x2F,
	0x43, 0x2B, 0x40, 0x0B, 0xD4, 0xC9, 0xD3, 0x6D, 0xAB, 0x17, 0x86, 0x9D, 0x54, 0xBB, 0x46, 0x5E,
	0x21, 0x9F, 0xF6, 0x01, 0x58, 0x03, 0x44, 0xF8, 0x28, 0xAD, 0x7C, 0x04, 0x35, 0xF0, 0x10, 0xD9,
	0x32, 0x3A, 0x6F, 0xBF, 0x3B, 0x07, 0x8F, 0xAC, 0x8E, 0xB7, 0x64, 0xF1, 0xF2, 0x34, 0x60, 0x09,
	0x08, 0xB6, 0x1C, 0xDC, 0x57, 0x56, 0x8C, 0xA2, 0xCD, 0x4F, 0xA7, 0x97, 0xD6, 0xEA, 0xCB, 0x3D,
	0x0C, 0x79, 0xA5, 0x06, 0x90, 0xEB, 0xD1, 0x94, 0x4E, 0x12, 0xA4, 0x84, 0x1A, 0x2E, 0x02, 0x9C,
	0x23, 0x98, 0xEF, 0xE0, 0x77, 0x4D, 0xE7, 0x4A, 0x2D, 0x55, 0xEE, 0x26, 0xAF, 0xFC, 0xCC, 0x33,
	0xD5, 0x70, 0xA9, 0x99, 0xC0, 0x6A, 0x25, 0x83, 0x8A, 0x6C, 0x59, 0x76, 0x31, 0xA8, 0x30, 0x7A,
	0x1E, 0x05, 0xDA, 0x6E, 0x13, 0x88, 0xC4, 0x45, 0x16, 0xF3, 0x36, 0x81, 0x91, 0x29, 0x71, 0x1D,
	0x1B, 0x68, 0x93, 0x8D, 0x95, 0x5A, 0x89, 0x67, 0xA3, 0xA1, 0x3F, 0x6B, 0x50, 0x00, 0x73, 0xC1,
	0xBA, 0x85, 0x9A, 0xFB, 0x18, 0x8B, 0x52, 0xA6, 0x2C, 0xB0, 0xBE, 0xFE, 0x7E, 0xEC, 0x92, 0xDD,
	0x9E, 0xC5, 0x3E, 0xF7, 0x69, 0x82, 0xC6, 0xD2, 0x87, 0x5D, 0x63, 0xF9, 0x24, 0x48, 0xF5, 0x1F,
	0xC2, 0xE2, 0x62, 0x14, 0x41, 0x11, 0x51, 0xE8, 0x27, 0xB9, 0x7B, 0x74, 0xFF, 0x20, 0x42, 0xE4,
	0xD0, 0xE1, 0x7F, 0x61, 0x53, 0x5B, 0x9B, 0xD8, 0x75, 0xDE, 0x3C, 0x96, 0x5C, 0xDB, 0xB1, 0xBD,
	0x38, 0xCA, 0x0D, 0x19, 0x0E, 0x7D, 0xE3, 0xB8, 0xC7, 0x0A, 0xFA, 0xE5, 0xE6, 0xC3, 0x2A, 0x15}

var mxUdpTable0 = [256]byte{0xA2, 0xFC, 0x90, 0xFB, 0x46, 0x47, 0xEE, 0x98, 0x0A, 0x41, 0x7A, 0x3C, 0x35, 0x62, 0xCA, 0x05,
	0xF9, 0x03, 0x0F, 0x40, 0x95, 0x76, 0x1B, 0xB2, 0xAC, 0x5E, 0xC6, 0xB3, 0xF1, 0x09, 0x08, 0x81,
	0xAB, 0xEA, 0x94, 0x4A, 0x84, 0x93, 0x8B, 0x15, 0x4D, 0xDE, 0x56, 0x1F, 0x3B, 0x33, 0xD2, 0x00,
	0xE4, 0xC2, 0xFA, 0x7C, 0x49, 0xCC, 0x5D, 0xF3, 0x3D, 0xE3, 0x2A, 0xA3, 0x02, 0xEC, 0x57, 0x0D,
	0xBA, 0x99, 0xDB, 0xA8, 0x07, 0x7D, 0x6A, 0x26, 0x1C, 0x91, 0xE5, 0x65, 0x39, 0xBF, 0xA7, 0x12,
	0x27, 0xC3, 0x88, 0xD3, 0xAA, 0x96, 0x04, 0x8F, 0x87, 0xBB, 0xC8, 0x01, 0xD4, 0xB7, 0x5C, 0xD0,
	0x7F, 0x51, 0x31, 0x44, 0xE6, 0xF5, 0x22, 0x1E, 0x5F, 0x67, 0x8D, 0xA9, 0x9E, 0xD5, 0x6B, 0xAD,
	0x25, 0x34, 0x72, 0x77, 0x3E, 0xEF, 0xB0, 0x0B, 0xF2, 0x2F, 0x23, 0x45, 0xAF, 0x1A, 0x48, 0xB1,
	0x75, 0x83, 0x7B, 0x18, 0x71, 0xFD, 0xD6, 0xD1, 0x68, 0x9C, 0xFE, 0x66, 0xDF, 0x74, 0xA0, 0xE2,
	0xCE, 0x6C, 0x36, 0x0C, 0x50, 0x4F, 0x64, 0xED, 0x58, 0xF4, 0x17, 0x53, 0xF8, 0x73, 0xDA, 0x16,
	0x85, 0x61, 0x4E, 0xCB, 0x2D, 0x37, 0xD9, 0x70, 0xC4, 0xA4, 0xD8, 0x6E, 0x97, 0xE0, 0x32, 0x2E,
	0x8A, 0xF7, 0xF6, 0xE1, 0x24, 0x6D, 0x13, 0x69, 0x79, 0x3F, 0xB6, 0x59, 0x21, 0xF0, 0xE9, 0xB9,
	0xC1, 0x11, 0x38, 0x78, 0x5A, 0x14, 0x43, 0x10, 0x20, 0x86, 0xDC, 0x2B, 0x06, 0xCD, 0xB4, 0x4C,
	0x42, 0xCF, 0xBD, 0x54, 0x3A, 0x8C, 0xE8, 0xC7, 0xA5, 0x1D, 0x7E, 0x5B, 0xA6, 0x52, 0x9F, 0xFF,
	0x30, 0x0E, 0xD7, 0xB8, 0x2C, 0x9B, 0x89, 0xB5, 0xC9, 0x4B, 0x28, 0x63, 0x9A, 0x6F, 0xAE, 0xBC,
	0xBE, 0xC0, 0x80, 0x29, 0x55, 0x60, 0xEB, 0x19, 0xC5, 0x82, 0xDD, 0x8E, 0xA1, 0x9D, 0xE7, 0x92}

var mxUdpTable1 = [256]byte{0xD9, 0x57, 0xCA, 0x2D, 0xF8, 0xD3, 0x1A, 0xA8, 0x2C, 0xD4, 0xF9, 0x6F, 0x1E, 0x8B, 0x37, 0x07,
	0xC1, 0x63, 0xD2, 0x45, 0x40, 0xCF, 0x32, 0x6D, 0x64, 0x81, 0x3A, 0x9B, 0xE3, 0xA3, 0xCD, 0x7E,
	0x5B, 0xB0, 0x4F, 0xC9, 0x27, 0xF6, 0x19, 0xA4, 0xEA, 0x3F, 0x6B, 0x58, 0x55, 0x7D, 0x7B, 0x0E,
	0xE1, 0x52, 0x46, 0x7C, 0x95, 0xF4, 0x15, 0x2B, 0x82, 0xB9, 0xAE, 0x5F, 0xF2, 0xB3, 0x4E, 0xDB,
	0x51, 0x00, 0x65, 0x6C, 0x54, 0x5C, 0x1B, 0x35, 0x60, 0x02, 0x12, 0xBA, 0xAB, 0x06, 0x03, 0xD1,
	0xFB, 0xF0, 0xA7, 0x36, 0x8D, 0x4B, 0x97, 0x71, 0xB5, 0x38, 0x4D, 0x9E, 0x1C, 0x93, 0xCC, 0x8F,
	0x77, 0x87, 0x0C, 0x61, 0x98, 0x90, 0x5A, 0xE5, 0x83, 0x23, 0x2E, 0xBE, 0xE4, 0x9A, 0x84, 0x3D,
	0x0B, 0xE0, 0xB7, 0xFE, 0xED, 0x39, 0xB8, 0xD6, 0x43, 0xDD, 0x29, 0x79, 0x92, 0x48, 0xA5, 0x26,
	0xA6, 0x67, 0xC6, 0xF3, 0x70, 0x0D, 0x69, 0x8E, 0xE7, 0xA2, 0xC3, 0xAF, 0x80, 0x6A, 0x04, 0x76,
	0x8C, 0xC2, 0xDC, 0x42, 0x1F, 0x47, 0xC7, 0x74, 0xA9, 0x99, 0x62, 0x1D, 0x4C, 0x0A, 0x41, 0x7F,
	0xC8, 0xD7, 0x5D, 0x25, 0x18, 0x59, 0xBD, 0x3C, 0xDE, 0x85, 0xAC, 0x89, 0xA0, 0xF1, 0xD8, 0x11,
	0x10, 0x16, 0x14, 0x5E, 0x05, 0xD5, 0xFD, 0x75, 0xBC, 0x2F, 0x96, 0xE8, 0x0F, 0xDF, 0x01, 0xA1,
	0xF7, 0xD0, 0x34, 0x88, 0xCE, 0xC0, 0xFC, 0x8A, 0x66, 0x08, 0xE6, 0xE9, 0xB2, 0xF5, 0x91, 0xAA,
	0x28, 0xB1, 0x9F, 0x20, 0x73, 0x21, 0x17, 0x2A, 0xEB, 0xDA, 0x94, 0x6E, 0x4A, 0x56, 0xC5, 0xB6,
	0x30, 0x22, 0x7A, 0x24, 0x53, 0xC4, 0x09, 0xFA, 0x86, 0x78, 0x3E, 0x3B, 0x33, 0x9C, 0xEC, 0x49,
	0x72, 0xAD, 0x44, 0xEF, 0xB4, 0xCB, 0xE2, 0x50, 0x13, 0x68, 0x31, 0xBF, 0xBB, 0x9D, 0xFF, 0xEE}

var mxUdpTable2 = [256]byte{0x5B, 0x9C, 0xE9, 0x2B, 0x15, 0xAB, 0xDB, 0x4F, 0x43, 0xCE, 0x29, 0xC2, 0x90, 0x82, 0x57, 0x88,
	0x53, 0x1E, 0xC4, 0x40, 0xE8, 0xEE, 0x1A, 0xAE, 0x26, 0xF2, 0x64, 0xA7, 0xFD, 0xEA, 0x2D, 0x1D,
	0x8A, 0x27, 0xD8, 0x86, 0x9E, 0x84, 0xF8, 0x80, 0xC9, 0x10, 0xC7, 0x77, 0x07, 0x55, 0xBE, 0x0C,
	0xC8, 0x42, 0x9A, 0x3D, 0x96, 0x41, 0xC5, 0x3E, 0x2E, 0xD2, 0x89, 0xEB, 0x7C, 0x23, 0x2C, 0x4E,
	0x5F, 0xD0, 0x09, 0x4D, 0x1B, 0xA3, 0xB0, 0x34, 0xC0, 0x70, 0x0A, 0xCC, 0x2F, 0x71, 0xFB, 0xCB,
	0xAA, 0x91, 0x95, 0x1F, 0x8C, 0x49, 0xC1, 0xCA, 0x00, 0x92, 0x5C, 0xDE, 0x94, 0x28, 0x7B, 0xB9,
	0x05, 0x19, 0xBC, 0x9F, 0x74, 0x75, 0xD3, 0xBD, 0x83, 0xFC, 0xE7, 0x63, 0xB3, 0xB5, 0xBA, 0x59,
	0x35, 0x73, 0xF9, 0x78, 0x2A, 0xC6, 0xEF, 0xA1, 0x6D, 0x72, 0x30, 0xFA, 0x6E, 0x13, 0x18, 0xF4,
	0x3F, 0x8D, 0x06, 0xE1, 0x16, 0x76, 0x17, 0xAF, 0xD6, 0x99, 0xF7, 0xF1, 0x8E, 0x32, 0xE3, 0xD5,
	0x3A, 0x08, 0xCD, 0x66, 0xB7, 0x87, 0x0D, 0xBF, 0xA8, 0x68, 0x58, 0x7F, 0xC3, 0x12, 0x4C, 0x54,
	0x69, 0x62, 0xF5, 0xD7, 0x1C, 0x65, 0x81, 0xE6, 0x0F, 0xD1, 0xB1, 0x02, 0xE5, 0x6F, 0xB4, 0x14,
	0xF0, 0x21, 0x51, 0x38, 0x37, 0x98, 0xEC, 0x0B, 0x5D, 0x5A, 0xE2, 0xF3, 0x3C, 0xFF, 0x45, 0x03,
	0x97, 0x56, 0xCF, 0x8B, 0x46, 0x52, 0xE4, 0xA2, 0xAC, 0x36, 0x6C, 0xA4, 0x79, 0xBB, 0x31, 0xB2,
	0x7A, 0x7D, 0xD9, 0xFE, 0xED, 0x33, 0x60, 0x7E, 0xD4, 0x61, 0x01, 0xF6, 0xDA, 0x20, 0x93, 0x0E,
	0xDF, 0x24, 0x50, 0x8F, 0x9B, 0x6B, 0x47, 0x04, 0xDD, 0x9D, 0xE0, 0x22, 0x4A, 0x44, 0x39, 0x3B,
	0xA5, 0xA6, 0x48, 0xA0, 0xB6, 0x4B, 0x5E, 0x85, 0x67, 0xA9, 0x6A, 0x11, 0xAD, 0xDC, 0xB8, 0x25}

var mxUdpTable3 = [256]byte{0x58, 0xDA, 0xAB, 0xBF, 0xE7, 0x60, 0x82, 0x2C, 0x91, 0x42, 0x4A, 0xB7, 0x2F, 0x96, 0xDF, 0xA8,
	0x29, 0xFB, 0x9D, 0x7D, 0xAF, 0x04, 0x84, 0x86, 0x7E, 0x61, 0x16, 0x44, 0xA4, 0x1F, 0x11, 0x53,
	0xDD, 0xB1, 0xEB, 0x3D, 0xE1, 0xFF, 0x18, 0x21, 0x5D, 0x0A, 0x74, 0x03, 0x3E, 0x1E, 0x38, 0x4C,
	0x7A, 0xCE, 0x8D, 0xD5, 0x47, 0x70, 0xC9, 0xB4, 0xB3, 0xEE, 0x90, 0xEF, 0xBC, 0x33, 0x37, 0x80,
	0x13, 0x35, 0x31, 0x08, 0xED, 0xBE, 0xC4, 0xE6, 0xF2, 0x55, 0xEC, 0xF5, 0x9E, 0x43, 0x3F, 0x07,
	0xE2, 0xB2, 0xC5, 0x10, 0x9F, 0x2D, 0xC1, 0x0E, 0x9A, 0x6F, 0xB9, 0x00, 0x5A, 0xB8, 0xF6, 0x40,
	0xD6, 0xD9, 0xA1, 0x6B, 0x1A, 0xA5, 0x93, 0xF8, 0x99, 0xA0, 0xFA, 0xE5, 0xCA, 0x78, 0x7C, 0xAD,
	0x49, 0x4D, 0x79, 0x71, 0x64, 0x65, 0x85, 0x2B, 0x73, 0xCC, 0xD0, 0x5E, 0x3C, 0xD1, 0xD7, 0x9B,
	0x27, 0xA6, 0x0D, 0x68, 0x25, 0xF7, 0x23, 0x95, 0x0F, 0x3A, 0x20, 0xC3, 0x54, 0x81, 0x8C, 0xE3,
	0x0C, 0x51, 0x59, 0xDE, 0x5C, 0x52, 0x34, 0xC0, 0xB5, 0x89, 0x32, 0xE4, 0x01, 0xE9, 0x24, 0x63,
	0xF3, 0x77, 0xC7, 0x45, 0xCB, 0xF0, 0xF1, 0x1B, 0x98, 0xF9, 0x50, 0x05, 0xC8, 0xFC, 0x17, 0x87,
	0x46, 0xAA, 0xCF, 0x6C, 0xAE, 0x6D, 0xF4, 0x94, 0xFE, 0x5F, 0x6E, 0xCD, 0x62, 0x67, 0x2E, 0x97,
	0x48, 0x56, 0x0B, 0x9C, 0x12, 0x36, 0x75, 0x2A, 0x30, 0x28, 0x57, 0x4F, 0x4B, 0x92, 0x09, 0xC2,
	0x41, 0xA9, 0x39, 0x66, 0xD8, 0x8F, 0x88, 0xA3, 0x22, 0xD2, 0xDC, 0x06, 0xFD, 0xE8, 0x5B, 0xE0,
	0xEA, 0x83, 0xBA, 0x8E, 0xC6, 0xAC, 0xA7, 0x6A, 0x14, 0x02, 0x1D, 0x3B, 0xB6, 0xD4, 0x15, 0x76,
	0xB0, 0x8B, 0x19, 0xBB, 0x7F, 0xA2, 0xDB, 0x8A, 0x26, 0x72, 0x7B, 0x4E, 0x69, 0x1C, 0xD3, 0xBD}

// Creates a crypt key id. These are used in the initial handshake for secondary and primary connections.
//
// 0x0050 = Primary Client
//
// 0x0051 - Primary Server
//
// 0x0052 - Secondary Client
//
// 0x0053 - Secondary Server
//
// 0x0054 - Cache Server
//
// 0x0057 - Chat Client
//
// 0x0058 - Chat Server
func CreateCryptKeyID(wID uint16, pBlock []byte) {
	rand.Seed(time.Now().UnixNano())

	for i := 0; i < 16; i++ {
		pBlock[i] = byte(rand.Int())
	}

	pBlock[4] = pBlock[15] ^ pBlock[13] ^ pBlock[5] ^ pBlock[2]
	pBlock[9] = (pBlock[14] ^ pBlock[8] ^ pBlock[1]) + byte(wID)
	pBlock[11] = (pBlock[12] ^ pBlock[10] ^ pBlock[7] ^ pBlock[6] ^ pBlock[3] ^ pBlock[0]) + (byte(wID) >> 7)

	for i := 0; i < 105; i++ {
		k := byte(0x57)
		if i > 0 {
			k = pBlock[(i-1)&0x0F]
		}

		if i%5 != 0 {
			pBlock[i&0x0F] += k
		} else {
			pBlock[i&0x0F] ^= k
		}
	}
}

// Gets the crypt key id that was used when generating the given crypt key.
func GetCryptKeyID(pBlock []byte) uint16 {
	kb := make([]byte, 16)
	copy(kb, pBlock)

	for i := 104; i >= 0; i-- {
		b := byte(0x57)
		if i > 0 {
			b = kb[(i-1)&0x0F]
		}

		if i%5 != 0 {
			kb[i&0x0F] -= b
		} else {
			kb[i&0x0F] ^= b
		}
	}

	keyId := kb[9] - (kb[14] ^ kb[8] ^ kb[1])

	if kb[4] != (kb[15]^kb[13]^kb[5]^kb[2]) || (kb[12]^kb[10]^kb[7]^kb[6]^kb[3]^kb[0]) != (kb[11]-(keyId>>7)) {
		return 0xFFFF
	}

	return uint16(keyId)
}

// Gets the upstream and downstream crypt keys, as well as the crypt key id.
func GetCryptKey(pBlock []byte, pUpKey *uint32, pDwKey *uint32) uint16 {
	wKeyID := GetCryptKeyID(pBlock)
	var dwUPKey, dwDWKey uint32 = 0, 0
	var bUPlus, bDPlus bool
	var bUK0, bUK1, bUK2, bUK3, bUD byte
	var bDK0, bDK1, bDK2, bDK3, bDD byte

	switch wKeyID {
	case 0x0050:
	case 0x0051:
		bUK0 = 2
		bUK1 = 5
		bUK2 = 9
		bUK3 = 11
		bUD = 0x68
		bUPlus = false
		bDK0 = 4
		bDK1 = 12
		bDK2 = 10
		bDK3 = 7
		bDD = 0x67
		bDPlus = false
	case 0x0052:
	case 0x0053:
		bUK0 = 7
		bUK1 = 3
		bUK2 = 9
		bUK3 = 5
		bUD = 0x54
		bUPlus = true
		bDK0 = 2
		bDK1 = 8
		bDK2 = 13
		bDK3 = 6
		bDD = 0x55
		bDPlus = true
	case 0x0057:
	case 0x0058:
		bUK0 = 7
		bUK1 = 3
		bUK2 = 9
		bUK3 = 5
		bUD = 0x22
		bUPlus = false
		bDK0 = 2
		bDK1 = 8
		bDK2 = 13
		bDK3 = 6
		bDD = 0x7A
		bDPlus = true
	default:
		return wKeyID
	}

	dwUPKey = uint32(pBlock[bUK3])
	dwUPKey <<= 8
	dwUPKey |= uint32(pBlock[bUK2])
	dwUPKey <<= 8
	dwUPKey |= uint32(pBlock[bUK1])
	dwUPKey <<= 8
	if bUPlus {
		dwUPKey |= uint32(pBlock[bUK0] + bUD)
	} else {
		dwUPKey |= uint32(pBlock[bUK0] - bUD)
	}

	dwDWKey = uint32(pBlock[bDK3])
	dwDWKey <<= 8
	dwDWKey |= uint32(pBlock[bDK2])
	dwDWKey <<= 8
	dwDWKey |= uint32(pBlock[bDK1])
	dwDWKey <<= 8

	if bDPlus {
		dwDWKey |= uint32(pBlock[bDK0] + bDD)
	} else {
		dwDWKey |= uint32(pBlock[bDK0] - bDD)
	}

	if wKeyID == 0x0051 || wKeyID == 0x0053 || wKeyID == 0x0058 {
		*pUpKey = dwDWKey
		*pDwKey = dwUPKey
	} else {
		*pUpKey = dwUPKey
		*pDwKey = dwDWKey
	}

	return wKeyID
}

// Decrypts a byte slice using the provided crypt key.
func DecryptMXTCP(pBuf []byte, len int, dwKey uint32) uint32 {
	dwRef := make([]byte, 4)
	binary.LittleEndian.PutUint32(dwRef, dwKey)

	for i := 0; i < len; i++ {
		cVal := pBuf[i]

		switch dwRef[2] & 0x03 {
		case 0:
			pBuf[i] = mxTcpTable2[dwRef[1]^cVal]
		case 1:
			pBuf[i] = mxTcpTable6[dwRef[1]^cVal]
		case 2:
			pBuf[i] = dwRef[0] ^ mxTcpTable0[cVal]
		case 3:
			pBuf[i] = dwRef[3] ^ mxTcpTable6[cVal]
		}
		dwRef[0] += dwRef[1]
		dwRef[1] ^= dwRef[3]
		dwRef[2] += mxTcpTable4[cVal]
		dwRef[3] ^= dwRef[2]
		dwRef[1]++
		dwRef[2]++
		dwRef[3]++
	}

	return binary.LittleEndian.Uint32(dwRef)
}

// Encrypts a byte slice using the provided crypt key.
func EncryptMXTCP(pBuf []byte, len int, dwKey uint32) uint32 {
	dwRef := make([]byte, 4)
	binary.LittleEndian.PutUint32(dwRef, dwKey)

	for i := 0; i < len; i++ {
		cVal := pBuf[i]
		switch dwRef[2] & 0x03 {
		case 0:
			pBuf[i] = dwRef[1] ^ mxTcpTable3[cVal]
		case 1:
			pBuf[i] = dwRef[1] ^ mxTcpTable7[cVal]
		case 2:
			pBuf[i] = mxTcpTable1[dwRef[0]^cVal]
		case 3:
			pBuf[i] = mxTcpTable7[dwRef[3]^cVal]
		}
		dwRef[0] += dwRef[1]
		dwRef[1] ^= dwRef[3]
		dwRef[2] += mxTcpTable4[pBuf[i]]
		dwRef[3] ^= dwRef[2]
		dwRef[1]++
		dwRef[2]++
		dwRef[3]++
	}

	return binary.LittleEndian.Uint32(dwRef)
}

// Encrypts a byte slice for udp communications.
func EncryptMXUDP(pBuf []byte, len int) {
	len32 := uint32(len)
	dwMax := len32 + (len32 << 4)

	for i := uint32(1); i < dwMax; i++ {
		pBuf[i%len32] = mxUdpTable3[pBuf[i%len32]] ^ mxUdpTable1[mxUdpTable0[(i-1)&0xFF]^pBuf[(i-1)%len32]]
	}
}

// Decrypts a byte slice for udp communications.
func DecryptMXUDP(pBuf []byte, len int) {
	len32 := uint32(len)

	for i := len32 + (len32 << 4) - 1; i > 0; i-- {
		pBuf[i%len32] = mxUdpTable2[mxUdpTable1[pBuf[(i-1)%len32]^mxUdpTable0[(i-1)&0xFF]]^pBuf[i%len32]]
	}
}

// Creates a "genac" key, which is 6 bytes used in primary <-> primary udp handshakes.
func CreateGenacKey() []byte {
	ac := make([]byte, 6)
	rand.Seed(time.Now().UnixNano())

	for j := 0; j < 6; j++ {
		ac[j] = byte(rand.Int())
		var d byte

		ac[3] = ac[1] ^ ac[2] ^ ac[4]
		ac[0] = (ac[4] ^ ac[1]) + ac[2]
		ac[5] = 0
		d = 0xd5

		for i := 0; i < 102; i++ {
			if i%5 != 0 {
				ac[(i % 6)] = ac[(i%6)] + d
				d = ac[(i % 6)]
			} else {

				ac[(i % 6)] = ac[(i%6)] ^ d
				d = ac[(i % 6)]
			}
		}
	}

	return ac
}

// Verifies a "genac" key.
func CheckGenacKey(key []byte) bool {
	ac := make([]byte, 6)
	copy(ac, key)
	d := ac[5]

	for i := 101; i > 0; i-- {
		if i%5 != 0 {
			ac[i%6] = d - ac[(i-1)%6]
			d = ac[(i-1)%6]
		} else {
			ac[i%6] = ac[(i-1)%6] ^ d
			d = ac[(i-1)%6]
		}
	}

	return d == 0xD5 || ac[0]^ac[5] == ac[0]
}

// Encrypts a set of primary cache nodes using the cache server encryption.
func EncryptFrontCode(pSrc []byte, pDst []byte) {
	crypt := make([]byte, 12)
	for i := 0; i < 12; i++ {
		crypt[i] = byte(rand.Int())
	}

	for i := 9; i >= 0; i-- {
		crypt[0] = fcReverseTable[0][crypt[0]] - pSrc[i*12+0]
		crypt[1] = fcReverseTable[1][crypt[1]] - pSrc[i*12+1]
		crypt[2] = fcReverseTable[2][crypt[2]] ^ pSrc[i*12+2]
		crypt[3] = fcReverseTable[3][crypt[3]] - pSrc[i*12+3]
		crypt[4] = fcReverseTable[4][crypt[4]] ^ pSrc[i*12+4]
		crypt[5] = fcReverseTable[5][crypt[5]] ^ pSrc[i*12+5]
		crypt[6] = fcReverseTable[6][crypt[6]] ^ pSrc[i*12+6]
		crypt[7] = fcReverseTable[7][crypt[7]] - pSrc[i*12+7]
		crypt[8] = fcReverseTable[8][crypt[8]] ^ pSrc[i*12+8]
		crypt[9] = fcReverseTable[9][crypt[9]] - pSrc[i*12+9]
		crypt[10] = fcReverseTable[10][crypt[10]] - pSrc[i*12+10]
		crypt[11] = fcReverseTable[11][crypt[11]] ^ pSrc[i*12+11]

		pDst[(i+1)*12+0] = pSrc[i*12+0] + crypt[0]
		pDst[(i+1)*12+1] = pSrc[i*12+1] + crypt[1]
		pDst[(i+1)*12+2] = pSrc[i*12+2] ^ crypt[2]
		pDst[(i+1)*12+3] = pSrc[i*12+3] + crypt[3]
		pDst[(i+1)*12+4] = pSrc[i*12+4] ^ crypt[4]
		pDst[(i+1)*12+5] = pSrc[i*12+5] ^ crypt[5]
		pDst[(i+1)*12+6] = pSrc[i*12+6] ^ crypt[6]
		pDst[(i+1)*12+7] = pSrc[i*12+7] + crypt[7]
		pDst[(i+1)*12+8] = pSrc[i*12+8] ^ crypt[8]
		pDst[(i+1)*12+9] = pSrc[i*12+9] + crypt[9]
		pDst[(i+1)*12+10] = pSrc[i*12+10] + crypt[10]
		pDst[(i+1)*12+11] = pSrc[i*12+11] ^ crypt[11]
	}

	copy(pDst, crypt)
}

// Decrypts a set of primary cache nodes using the cache server encryption.
func DecryptFrontCode(pSrc []byte, pDst []byte) {
	crypt := make([]byte, 12)

	copy(crypt, pSrc[0:12])

	for i := 0; i < 10; i++ {
		pDst[i*12+0] = pSrc[12+i*12+0] - crypt[0]
		pDst[i*12+1] = pSrc[12+i*12+1] - crypt[1]
		pDst[i*12+2] = pSrc[12+i*12+2] ^ crypt[2]
		pDst[i*12+3] = pSrc[12+i*12+3] - crypt[3]
		pDst[i*12+4] = pSrc[12+i*12+4] ^ crypt[4]
		pDst[i*12+5] = pSrc[12+i*12+5] ^ crypt[5]
		pDst[i*12+6] = pSrc[12+i*12+6] ^ crypt[6]
		pDst[i*12+7] = pSrc[12+i*12+7] - crypt[7]
		pDst[i*12+8] = pSrc[12+i*12+8] ^ crypt[8]
		pDst[i*12+9] = pSrc[12+i*12+9] - crypt[9]
		pDst[i*12+10] = pSrc[12+i*12+10] - crypt[10]
		pDst[i*12+11] = pSrc[12+i*12+11] ^ crypt[11]

		crypt[0] = fcTable[0][(pDst[i*12+0] + crypt[0])]
		crypt[1] = fcTable[1][(pDst[i*12+1] + crypt[1])]
		crypt[2] = fcTable[2][(pDst[i*12+2] ^ crypt[2])]
		crypt[3] = fcTable[3][(pDst[i*12+3] + crypt[3])]
		crypt[4] = fcTable[4][(pDst[i*12+4] ^ crypt[4])]
		crypt[5] = fcTable[5][(pDst[i*12+5] ^ crypt[5])]
		crypt[6] = fcTable[6][(pDst[i*12+6] ^ crypt[6])]
		crypt[7] = fcTable[7][(pDst[i*12+7] + crypt[7])]
		crypt[8] = fcTable[8][(pDst[i*12+8] ^ crypt[8])]
		crypt[9] = fcTable[9][(pDst[i*12+9] + crypt[9])]
		crypt[10] = fcTable[10][(pDst[i*12+10] + crypt[10])]
		crypt[11] = fcTable[11][(pDst[i*12+11] ^ crypt[11])]
	}
}

// Flips crypt key bytes (used in legacy WinMXGroup patch)
func Mangle(buff []byte) {
	buff[0] = ^buff[0]
	buff[1] ^= 0xf0
	buff[2] ^= 0x0f
	buff[3] ^= 0x77
	buff[4] ^= 0x77
	buff[5] = ^buff[5]
	buff[6] ^= 0xf0
	buff[7] ^= 0x0f
	buff[8] ^= 0x77
	buff[9] ^= 0x77
	buff[10] = ^buff[10]
	buff[11] ^= 0xf0
	buff[12] ^= 0x0f
	buff[13] ^= 0x77
	buff[14] ^= 0x77
}
